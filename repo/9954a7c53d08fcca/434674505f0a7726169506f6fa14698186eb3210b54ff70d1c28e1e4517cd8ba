{"id":"434674505f0a7726169506f6fa14698186eb3210b54ff70d1c28e1e4517cd8ba","to":[],"value":"// 00 - mouse interestion with canvas\r\n\r\nObject.assign($, await require('../util/random.js'))\r\nconst { log, clear } = originconsole\r\nclear()\r\n\r\nconst cvs = await requestcanvas()\r\nconst ctx = cvs.getContext('2d', { willReadFrequently: true })\r\nconst now = () => performance.now() / 1000\r\nlet devicePixelRatio = await requestdpi()\r\non('canvasresize', ({ w, h, dpi }) => w !== 0 && h !== 0\r\n  ? (cvs.width = w, cvs.height = h, devicePixelRatio = dpi) : 0)\r\n\r\nconst loop = () => {\r\n  frame()\r\n  requestAnimationFrame(loop)\r\n}; requestAnimationFrame(loop)\r\n\r\nconst id2color = i =>\r\n  '#' + [...new Uint8Array((new Uint32Array([i])).buffer)\r\n  ].slice(0, 3).map(v => v.toString(16).padStart(2, '0')).join('')\r\n\r\nlet nextid = 1\r\nconst entities = [...new Array(1000).keys()].map(i => {\r\n  const w = rd(0, 100), h = rd(0, 100),\r\n    x = rd(0, cvs.width - w), y = rd(0, cvs.height - h),\r\n    id = nextid += 50, idcolor = id2color(id)\r\n  // log(id, idcolor)\r\n  return { x, y, w, h, id, idcolor }\r\n})\r\nconst idmap = new Map\r\nfor (const e of entities) {\r\n  idmap.set(e.id, e)\r\n}\r\n\r\nconst frame = (t = now()) => {\r\n  const cw = cvs.width, ch = cvs.height\r\n  ctx.clearRect(0, 0, cw, ch)\r\n  for (const e of entities) {\r\n    ctx.fillStyle = e.idcolor\r\n    ctx.fillRect(e.x, e.y, e.w, e.h)\r\n  }\r\n  const r = 200\r\n  const mousepos = { x: cw / 2 + r * Math.sin(t), y: ch / 2 + r * Math.cos(t) }\r\n  const mousecolor = ctx.getImageData(\r\n    mousepos.x, mousepos.y, 1, 1).data\r\n  mousecolor[3] = 0\r\n  const id = new Uint32Array(mousecolor.buffer)[0]\r\n  // log(id, id2color(id))\r\n\r\n  ctx.fillStyle = '#00f'\r\n  if (idmap.has(id)) {\r\n    const e = idmap.get(id)\r\n    ctx.fillRect(e.x, e.y, e.w, e.h)\r\n  }\r\n  ctx.fillStyle = '#ff0'\r\n  ctx.fillRect(mousepos.x, mousepos.y, 4, 4)\r\n}"}