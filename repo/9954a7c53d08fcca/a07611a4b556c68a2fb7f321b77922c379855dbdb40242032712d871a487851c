{"id":"a07611a4b556c68a2fb7f321b77922c379855dbdb40242032712d871a487851c","to":[],"value":"const _ = undefined\r\nconst now = () => performance.now() / 1000\r\nconst { log, clear } = originconsole\r\n$.log = log\r\nconst rd = await require('../util/random.js')\r\nclear()\r\n\r\nconst cvs = await requestcanvas()\r\nconst ctx = cvs.getContext('2d', { willReadFrequently: true })\r\nlet devicePixelRatio = await requestdpi()\r\ncvs.needresize = true\r\non('canvasresize', () => cvs.needresize = true)\r\non('canvasresize', ({ w, h, dpi }) => w !== 0 && h !== 0\r\n  ? (cvs.width = w, cvs.height = h, devicePixelRatio = dpi) : 0)\r\n\r\nlet framecount = 0\r\nconst loop = () => {\r\n  if ($.frame) { framecount++; frame() }\r\n  requestAnimationFrame(loop)\r\n}; requestAnimationFrame(loop)\r\n\r\n// ----------------------------------------------------------\r\ncomponent.define('space-spliter', {\r\n  direction: 'horizontal', barsize: 10,\r\n  children: [], childsizes: [], resizebars: [],\r\n}, m => {\r\n  const h = m.direction === 'horizontal'\r\n  const base = (m._size[h ? 0 : 1] - (m.children.length - 1) * m.barsize) / m.children.length\r\n  const nonbase = m._size[h ? 1 : 0]\r\n  const cs = m.children.map(v => ({ type: 'component', comp: v }))\r\n  const rbs = m.resizebars.map(v => ({ type: 'component', comp: v }))\r\n  let l = 0, i = 0; for (const c of m.children) {\r\n    const childbase = base * m.childsizes[i]\r\n    const s = h ? [childbase, nonbase] : [nonbase, childbase]\r\n    cs[i].position = h ? [l, 0] : [0, l]\r\n    l += childbase; if (rbs[i]) {\r\n      const s = h ? [m.barsize, nonbase] : [nonbase, m.barsize], r = m.resizebars[i]\r\n      if (!deepequal(s, r._size)) { r._size = s; component.markdirty(r) }\r\n      rbs[i].position = h ? [l, 0] : [0, l]; l += m.barsize\r\n    } i++; if (deepequal(s, c._size)) { continue }\r\n    c._size = s; component.markdirty(c)\r\n  } return [...cs, ...rbs]\r\n}, df => df('splice', (m, i, d, ...a) => {\r\n  let sz = []; if (!a[a.length - 1]._iscomp) { sz = a.pop() }\r\n  if (sz.length < a.length) { sz.push(...new Array(a.length - sz.length).fill(1)) }\r\n  else if (sz.length > a.length) { sz = sz.slice(0, a.length) }\r\n  m.children.splice(i, d, ...a); m.childsizes.splice(i, d, ...sz)\r\n  const l = m.children.length - 1\r\n  const rl = m.resizebars.length; if (l > rl) {\r\n    m.resizebars.push(...new Array(l - rl).keys().map(() =>\r\n      component.create('resize-bar', r => (r.parent = m, component.on(r, 'pointerdown', m => {\r\n        const p = m.parent, h = p.direction === 'horizontal'\r\n        const i = p.resizebars.indexOf(m)\r\n        const a = getbbox(p._view[i]), b = getbbox(p._view[i + 1])\r\n        const totalratio = p.childsizes[i] + p.childsizes[i + 1]\r\n        const base = h ? b.right - a.left : b.bottom - a.top\r\n        const actual = base - p.barsize, bs2 = p.barsize / 2\r\n        dragprocess(e => {\r\n          const current = e.mousepos[h ? 0 : 1] - (h ? a.left : a.top)\r\n          const na = Math.min(Math.max(current - bs2, 0), actual)\r\n          const nb = Math.min(Math.max(base - current - bs2, 0), actual)\r\n          p.childsizes[i] = totalratio * na / actual\r\n          p.childsizes[i + 1] = totalratio * nb / actual\r\n          component.markdirty(p)\r\n        })\r\n      })))))\r\n  } else for (let i = 0; i < rl - l; i++) { m.resizebars.pop() }\r\n}))\r\nconst bindpe = (m, o) => (o.pointerevent = true, o.eventtarget = m, o)\r\ncomponent.define('resize-bar', (m = { value: 0 }) => (\r\n  component.on(m, 'pointerenter', m => { component.animation(v => m.value = v, m.value, 1) }),\r\n  component.on(m, 'pointerleave', m => { component.animation(v => m.value = v, m.value, 0) }),\r\n  m), m => bindpe(m, { type: 'rect', args: [0, 0, ...m._size], color: '#aaa' }))\r\ncomponent.define('resize-text', { text: '' },\r\n  m => ({ type: 'text', args: [m.text, 0, 200, 100] }))\r\n// ----------------------------------------------------------\r\ncomponent.root = component.create('space-spliter',\r\n  m => (component.watch(m, (_, m) => m.children.forEach(\r\n    (c, i) => c.text = m.childsizes[i].toFixed(2).replace(/\\.?0+$/, ''))),\r\n    m.splice(0, 0, component.create('resize-text'),\r\n      component.create('resize-text'),\r\n      component.create('resize-text'), [1.5, 0.75, 0.75])))"}