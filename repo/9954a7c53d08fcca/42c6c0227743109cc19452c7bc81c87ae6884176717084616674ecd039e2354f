{"id":"42c6c0227743109cc19452c7bc81c87ae6884176717084616674ecd039e2354f","to":[],"value":"Object.assign($, await require('lib/common.js'))\r\nconst grd = await require('lib/random.js')\r\nconsole.clear()\r\n\r\nlet framecount = 0\r\nconst loop = () => {\r\n  if ($.frame) { framecount++; frame() }\r\n  requestAnimationFrame(loop)\r\n}; requestAnimationFrame(loop)\r\n\r\n$.component = { globalenv: $ }; with (component) {\r\n  const $ = component\r\n  $.definition = {}\r\n  const cdae = n => Error(`component definition \"${n}\" already exists.`)\r\n  const cdne = n => Error(`component definition \"${n}\" not exists.`)\r\n  $.define = (name, model = {}, transition, view, extra = {}) => {\r\n    if (definition[name]) { throw adae(name) }\r\n    view = new Function('$', `with($) {\\nreturn ${view.toString()}\\n}`)(globalenv)\r\n    if (typeof model === 'function') { model = model() }\r\n    if (model.recordhistory) { model.history = [] }\r\n    model.type = name, model._iscomp = true\r\n    const t = {}; if (typeof transition === 'function') {\r\n      transition((n, f, mkdirty = true, history = true) => t[n] = new Function('$',\r\n        `with($) {\\nconst __f__ = ${f.toString()}\r\nconst __rf__ = function (...a) {\\nconst m = this, r = __f__(m, ...a)\r\n// TODO: a should be serialized since it could contain something like component\r\nif(${history} && m.recordhistory) { m.history.push([${n}, a]) }\r\nif(__rf__.markdirty) { component.markdirty(m) }\\nreturn r\\n}\r\n__rf__.markdirty = ${!!mkdirty}\\nreturn __rf__\\n}`)(globalenv))\r\n    }\r\n    definition[name] = { model, view, transition: t }\r\n    return (...a) => create(n, ...a)\r\n  }\r\n  $.create = (name, mod) => {\r\n    if (!definition[name]) { throw cdne(name) }\r\n    const d = definition[name], m = deepclone(d.model); m.id = grd.uuid()\r\n    Object.setPrototypeOf(m, d.transition) // TODO: not sure whether this is slow or not\r\n    if (typeof mod === 'function') { mod(m) } return m\r\n  }\r\n\r\n  $.dirty = new Set, $.dirtyarray = []\r\n  $.markdirty = m => {\r\n    if (dirty.has(m)) { return }\r\n    dirty.add(m); dirtyarray.push(m)\r\n  }\r\n  const dom = (n = 'div') => document.createElement(n)\r\n  const svg = n => document.createElementNS('http://www.w3.org/2000/svg', n)\r\n  const svgtags = new Set(`a altGlyph altGlyphDef altGlyphItem\r\n  animate animateColor animateMotion animateTransform animation\r\n  audio canvas circle clipPath color-profile cursor defs desc discard\r\n  ellipse feBlend feColorMatrix feComponentTransfer feComposite\r\n  feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight\r\n  feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur\r\n  feImage feMerge feMergeNode feMorphology feOffset fePointLight\r\n  feSpecularLighting feSpotLight feTile feTurbulence filter font\r\n  font-face font-face-format font-face-name font-face-src font-face-uri\r\n  foreignObject g glyph glyphRef handler hkern iframe image line\r\n  linearGradient listener marker mask metadata missing-glyph mpath path\r\n  pattern polygon polyline prefetch radialGradient rect script set\r\n  solidColor stop style svg switch symbol tbreak text textArea textPath\r\n  title tref tspan unknown use video view vker`.split(/\\s+/))\r\n  const todom = v => {\r\n    switch (v.type) {\r\n      case 'group': return svg('g')\r\n      default: return v.ns !== 'dom'\r\n        && svgtags.has(v.type) ? svg(v.type) : dom(v.type)\r\n    }\r\n  }\r\n  const dfrag = document.createDocumentFragment.bind(document)\r\n  const dsplice = (p, i, c, ...n) => {\r\n    const d = p.childNodes, rm = [], l = d.length\r\n    const f = dfrag(), s = i < 0 ? l + i : i\r\n    const e = typeof c === 'number' ? s + c : l\r\n    for (let i = e; i < s; i++) if (d[s]) rm.push(p.removeChild(d[s]))\r\n    for (const e of n) { f.appendChild(e) }\r\n    p.insertBefore(f, d[s]); return rm\r\n  }\r\n  const needupdate = new Set\r\n  $.render = (c, bypass = false) => {\r\n    if (!bypass && !needupdate.has(c)) { return }\r\n    const iscomp = c._iscomp\r\n    if (iscomp && !c._view) {\r\n      const d = definition[c.type]\r\n      if (!d) { throw cdne(c.type) }\r\n      c._view = d.view(c)\r\n    }\r\n    const v = iscomp ? c._view : c\r\n    if (!c._dom) { c._dom = todom(v) }\r\n\r\n    const d = c._dom, dc = d.childNodes\r\n    const vcs = v.children ?? []\r\n    let i = 0; for (const cd of vcs) {\r\n      if (!cd._iscomp || !cd._dom) { render(cd, true) }\r\n      if (cd._dom !== dc[i++]) { d.insertBefore(cd._dom, dc[i]) }\r\n    } if (vcs.length < dc.length) {\r\n      dsplice(d, vcs.length, dc.length - vcs.length)\r\n    }\r\n    if (c._size) {\r\n      const w = c._size[0] + 'px', h = c._size[1] + 'px'\r\n      if (d.style.width !== w) { d.style.width = w }\r\n      if (d.style.height !== h) { d.style.height = h }\r\n    }\r\n    if (c._translate) {\r\n      const tr = `translate(${c._translate.map(v => v + 'px').join(', ')})`\r\n      if (tr !== d.style.transform) { d.style.transform = tr }\r\n    }\r\n    for (const k of Object.keys(v)) {\r\n      if (k.startsWith('_') || k === 'type' || k === 'children') { continue }\r\n      if (k === 'args') { continue }\r\n      if (v[k] !== d.getAttribute(k)) { d.setAttribute(k, v[k]) }\r\n    }\r\n    needupdate.delete(c)\r\n  }\r\n  $.update = () => {\r\n    const isdirty = dirtyarray.length > 0\r\n    needupdate.clear()\r\n    let c; while (c = dirtyarray.shift()) {\r\n      if (!dirty.has(c)) { continue }\r\n      const d = definition[c.type]\r\n      if (!d) { throw cdne(c.type) }\r\n      c._view = d.view(c)\r\n      dirty.delete(c)\r\n      needupdate.add(c)\r\n    }\r\n    if (isdirty) for (const c of [...needupdate]) { render(c) }\r\n  }\r\n  let previoussize = [0, 0]\r\n  $.frame = () => {\r\n    const groot = globalenv.root\r\n    const rbcr = groot.getBoundingClientRect()\r\n    const size = [rbcr.width, rbcr.height]\r\n    if (!deepequal(size, previoussize)) { root._size = size; markdirty(root) }\r\n    previoussize = size; update()\r\n    if (groot.childNodes[0] !== root._dom) {\r\n      groot.insertBefore(root._dom, _)\r\n    }\r\n  }\r\n}\r\n\r\nroot.style.overflow = 'hidden'\r\n\r\ncomponent.define('graph', {\r\n  direction: 'horizontal', subgraph: [],\r\n  target_length: 50,\r\n  node: new Set,\r\n  camera: [1, 0, 0],\r\n}, df => (\r\n  df('add', (m, d, n = component.create('graph-node',\r\n    nm => (nm.parent = m, nm.data = d, nm.ranksum = 0, nm.rankcount = 0))) =>\r\n    (m.graphmoded = true, m.node.add(n), n)),\r\n  df('link', (m, a, b, d, e = component.create('graph-edge',\r\n    em => (em.parent = m, em.from = a, em.to = b, em.data = d))) =>\r\n    (m.graphmoded = true, a.to.add(e), b.from.add(e), e))),\r\n  m => {\r\n    if (!m._view) {\r\n      const r = { type: 'group', children: [] }\r\n      r.stroke = 'black'\r\n      r['stroke-width'] = '0.5px'\r\n      m._view = { type: 'svg', children: [r] }\r\n    }\r\n\r\n    const h = m.direction === 'horizontal'\r\n    m._horizontal = h\r\n    const r = m._view.children[0]\r\n    const nvs = [], evs = []\r\n    for (const n of m.node) {\r\n      n._translate = n.position\r\n      nvs.push(n)\r\n      component.markdirty(n)\r\n      for (const e of n.to) {\r\n        evs.push(e)\r\n        component.markdirty(e)\r\n      }\r\n    }\r\n    r.children = [...evs, ...nvs]\r\n    r._translate = [m._size[0] / 2, m._size[1] / 2]\r\n    return m._view\r\n  })\r\nconst splitgraph = m => {\r\n  m.subgraph = []; let seen = new Set, sub = 0\r\n  for (let n of m.node) {\r\n    if (seen.has(n)) { continue }\r\n    const s = m.subgraph[sub++] = [], q = [n]\r\n    while (n = q.shift()) {\r\n      if (seen.has(n)) { continue } s.push(n), seen.add(n)\r\n      q.push(...[...n.to].map(e => e.to), ...[...n.from].map(e => e.from))\r\n    }\r\n  }\r\n  for (const n of m.node) {\r\n    n.acceleration ??= [0, 0], n.velocity ??= [0, 0]\r\n    n.position ??= [forcerd.rd(-1, 1), forcerd.rd(-1, 1)]\r\n  }\r\n  m.graphmoded = false\r\n}\r\nconst rankrd = grd.genrd(2462462542)\r\nconst rankgraph = (m, l = 1) => {\r\n  const { rdi } = rankrd, { round, abs } = Math\r\n  for (const g of m.subgraph) {\r\n    if (g.converged) { continue }\r\n    if (g.length <= 1) { g[0].rank = 0; g.converged = true; continue }\r\n    for (let i = 0; i < l; i++) {\r\n      const q = [[g[rdi(g.length)], 0]], seen = new Set\r\n      while (q.length > 0) {\r\n        const [n, d] = q.splice(rdi(q.length), 1)[0]\r\n        if (seen.has(n)) { continue } seen.add(n)\r\n        n.ranksum += d, q.push(\r\n          ...[...n.to].map(e => [e.to, d - 1]),\r\n          ...[...n.from].map(e => [e.from, d + 1]))\r\n      }\r\n    }\r\n\r\n    let d = 0; for (const n of g) {\r\n      n.rankcount ??= 0, n.rankcount += l\r\n      n.oldrank = n.rank ??= 0\r\n      n.rank = n.ranksum / n.rankcount\r\n      d += abs(n.rank - n.oldrank)\r\n    }\r\n    // if (d < 0.001 * g.length) { g.converged = true }\r\n    g.converged = true\r\n  } rankrd.next()\r\n\r\n}\r\nconst forcerd = grd.genrd(136360090)\r\nconst forcedirect = (m, step = 4) => {\r\n  const { sqrt, max, min } = Math\r\n  const gravity = { position: [0, 0], acceleration: [0, 0] }\r\n  const electric = (a, b, p, minl = 1) => {\r\n    const pdx = b.position[0] - a.position[0]\r\n    const pdy = b.position[1] - a.position[1]\r\n    const lsq = max(pdx * pdx + pdy * pdy, minl)\r\n    const l = sqrt(lsq), f = p / (lsq * l)\r\n    const fx = f * pdx, fy = f * pdy\r\n    a.acceleration[0] += fx, a.acceleration[1] += fy\r\n    b.acceleration[0] -= fx, b.acceleration[1] -= fy\r\n  }, distance = (a, b, p) => {\r\n    const pdx = b.position[0] - a.position[0]\r\n    const pdy = b.position[1] - a.position[1]\r\n    const fx = p * pdx, fy = p * pdy\r\n    a.acceleration[0] += fx, a.acceleration[1] += fy\r\n    b.acceleration[0] -= fx, b.acceleration[1] -= fy\r\n  }, friction = 0.01, dt = 0.05\r\n  const tl = m.target_length, ts = tl * 2\r\n  const pe = -ts * tl ** 2, pd = ts * 20 / tl, pg = 0.05 * pd\r\n  const h = m.direction === 'horizontal' ? 0 : 1\r\n  const g = m.subgraph.flat(1)\r\n  for (let i = 0; i < step; i++) {\r\n    let total_speed = 0\r\n    for (let i = 0, l = g.length; i < l; i++) {\r\n      const n = g[i], nto = 1 / n.to.size\r\n      for (let j = i + 1; j < l; j++) { electric(n, g[j], pe) }\r\n      for (const { to } of n.to) { distance(n, to, pd * nto) }\r\n      if (n.hardlock) { n.velocity[0] = n.velocity[1] = 0; continue }\r\n      n.acceleration[h] -= n.rank * tl * 10\r\n      distance(n, gravity, pg)\r\n      const vx = n.velocity[0] + n.acceleration[0] * dt\r\n      const vy = n.velocity[1] + n.acceleration[1] * dt\r\n      let v = sqrt(vx * vx + vy * vy), vrx = vx / v, vry = vy / v\r\n      total_speed += v = max(min(v, ts) - ts * friction, 0)\r\n      if (n.lock) { n.velocity[0] = n.velocity[1] = 0; continue }\r\n      n.position[0] += (n.velocity[0] = vrx * v) * dt\r\n      n.position[1] += (n.velocity[1] = vry * v) * dt\r\n      n.acceleration[0] = n.acceleration[1] = 0\r\n      // if (Number.isNaN(n.position[0])) { debugger }\r\n    } m.total_speed = total_speed\r\n  }\r\n  if (framecount === 1) { log(g[0].position) }\r\n}\r\n$.layoutgraph = m => {\r\n  if (m.total_speed <= 0 || Number.isNaN(m.total_speed)) { return }\r\n  if (m.graphmoded) { splitgraph(m) }\r\n  rankgraph(m, 100), forcedirect(m, 4)\r\n  component.markdirty(m)\r\n}\r\n\r\ncomponent.define('graph-node', { from: new Set, to: new Set }, df => (\r\n  df('link', (m, t, e) => parent.link(m, t, e), false)\r\n), m => {\r\n  m._foreign ??= { type: 'foreignObject', style: 'overflow: visible' }\r\n  m._foreign.children = [m.data]\r\n  const children = [m._foreign, ...m.debug ? [\r\n    { type: 'path', d: ['M', 0, 0, 'L', ...m.velocity].join(' '), color: 'green' },\r\n    { type: 'path', d: ['M', 0, 0, 'L', ...m.acceleration.map(v => v * 0.02)].join(' '), color: 'red' },] : []\r\n  ]; return { type: 'group', children }\r\n})\r\ncomponent.define('graph-edge', _, _, m => {\r\n  const a = m.from.position, b = m.to.position\r\n  const vp = (m.virtualpoint ?? []).map(vp => ['L', ...vp.position])\r\n  const d = [['M', ...a], ...vp, ['L', ...b]].flat(1).join(' ')\r\n  const r = { type: 'path', d }\r\n  return r\r\n})\r\ncomponent.define('text-editor', _, _, m => {\r\n  return { type: 'div', contentEditable: true, style: 'backdrop-filter: blur(10px) brightness(0.9);box-shadow: #00000044 0px 4px 10px;width:100px;height:100px;border-radius: 10px;border: white solid 1px;' }\r\n})\r\n\r\nconst g = component.create('graph', m => m.target_length = 150)\r\ncomponent.root = g\r\n\r\n// const rgrd = grd.genrd(3703646480)\r\nconst rgrd = grd.genrd()\r\nconst randomgraph = (g, l = rgrd.rdi(50, 100), ns = []) => {\r\n  for (let i = 0; i < l; i++) { ns.push(g.add(component.create('text-editor'))) }\r\n  for (let i = 0; i < l; i++) {\r\n    const r = rgrd.rd() > 0.8 ? 2 : 1\r\n    // const r = 2\r\n    // const r = 1\r\n    const a = ns[i], s = [...ns]\r\n    for (let j = 0; j < r && s.length > 0; j++) {\r\n      g.link(a, s.splice(rgrd.rdi(s.length), 1)[0])\r\n    }\r\n  } rgrd.next()\r\n}\r\nrandomgraph(g)\r\nrandomgraph(g)\r\n\r\nsplitgraph(g)\r\n\r\nlog(rgrd.seed)\r\nlog(g.subgraph.map(g => g.length))\r\nlog(g)\r\n\r\n$.frame = () => {\r\n  if (framecount === 1) {\r\n  }\r\n  layoutgraph(g)\r\n  component.frame()\r\n}"}