{"id":"9da557732b07c50873a5f5d15a2aadbbdd299e268ae19fad1c1301dbb9c9495b","to":[],"value":"[{\"type\":\"text\",\"value\":\"现在我们可以加载代码到工作线程。\",\"open\":true},{\"type\":\"ref\",\"line\":[1,11],\"value\":\"5783d75c33e8d6e6e7b0dac28fa68eaeb3db2c5130540d6db7aadea7fa19f86e\",\"open\":true},{\"type\":\"exec\",\"value\":\"block above\",\"open\":false},{\"type\":\"ref\",\"line\":[1,11],\"value\":\"bf66de86aa78304df6ae579cc1bf15ebb65ea02da6e46bb7b5742864b9d37208\",\"open\":true},{\"type\":\"text\",\"value\":\"上面的代码加载了一个在worker线程的计算负载，如果该线程因为计算而阻塞，右上角会出现一盏红灯进行指示。\",\"open\":true},{\"type\":\"ref\",\"line\":[1,11],\"value\":\"d8437a0a6403aa24ea29d8f5cc9b7b99217696828051522c7c532d8debfbadb3\",\"open\":true,\"content\":\"const cvs = await requestcanvas()\\r\\nconst ctx = await cvs.getContext('2d')\\r\\nconst now = () => performance.now() / 1000\\r\\n\\r\\nrequestAnimationFrame($.loop = () => {\\r\\n  const w = cvs.width, h = cvs.height, t = now()\\r\\n  ctx.clearRect(0, 0, w, h)\\r\\n  ctx.fillRect(w / 2 - 50 + Math.sin(t) * 100,\\r\\n    h / 2 - 50 + Math.cos(t) * 100, 100, 100)\\r\\n  requestAnimationFrame(loop)\\r\\n})\"},{\"type\":\"ref\",\"line\":[1,11],\"value\":\"cfab8500f008cef36253efd4ef861367bee73364fcbb30f1688ae4cbdc21551a\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"ref\",\"line\":[1,11],\"value\":\"d8437a0a6403aa24ea29d8f5cc9b7b99217696828051522c7c532d8debfbadb3\",\"open\":true,\"content\":\"const { log } = originconsole\\r\\n\\r\\nconst cvs = await requestcanvas()\\r\\nconst ctx = await cvs.getContext('2d')\\r\\nconst now = () => performance.now() / 1000\\r\\n\\r\\non('canvasresize', ({ w, h, dpi }) => {\\r\\n  cvs.width = w\\r\\n  cvs.height = h\\r\\n})\\r\\n\\r\\nrequestAnimationFrame($.loop = () => {\\r\\n  const w = cvs.width, h = cvs.height, t = now()\\r\\n  ctx.clearRect(0, 0, w, h)\\r\\n  ctx.fillRect(w / 2 - 50 + Math.sin(t) * 100,\\r\\n    h / 2 - 50 + Math.cos(t) * 100, 100, 100)\\r\\n  ctx.font = '100px sans'\\r\\n  ctx.fillText('hello worker', 100, 100)\\r\\n  requestAnimationFrame(loop)\\r\\n})\"},{\"type\":\"ref\",\"line\":[1,11],\"value\":\"cfab8500f008cef36253efd4ef861367bee73364fcbb30f1688ae4cbdc21551a\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"这样我们就实现了对offscreencanvas的resize。\",\"open\":true},{\"type\":\"text\",\"value\":\"下面该写什么呢？可以实现输入事件的处理，也可以直接开写webgpu的封装。<div>那就选后面那个吧。</div>\",\"open\":true},{\"type\":\"ref\",\"line\":[1,11],\"value\":\"d8437a0a6403aa24ea29d8f5cc9b7b99217696828051522c7c532d8debfbadb3\",\"open\":true,\"content\":\"const { log } = originconsole\\r\\n\\r\\nconst canvas = await requestcanvas()\\r\\nconst adapter = await navigator.gpu.requestAdapter()\\r\\nconst device = await adapter.requestDevice()\\r\\nconst context = canvas.getContext('webgpu')\\r\\n\\r\\nconst format = navigator.gpu.getPreferredCanvasFormat()\\r\\ncontext.configure({ device, format, alphaMode: 'premultiplied' })\\r\\n\\r\\nconst now = () => performance.now() / 1000\\r\\non('canvasresize', ({ w, h }) => w !== 0 && h !== 0\\r\\n  ? (canvas.width = w, canvas.height = h) : 0)\\r\\n\\r\\nconst pipeline = device.createRenderPipeline({\\r\\n  layout: 'auto',\\r\\n  vertex: {\\r\\n    module: device.createShaderModule({\\r\\n      code: `@vertex\\r\\nfn main(\\r\\n  @builtin(vertex_index) VertexIndex : u32\\r\\n) -> @builtin(position) vec4f {\\r\\n  var pos = array<vec2f, 3>(\\r\\n    vec2(0.0, 0.5),\\r\\n    vec2(-0.5, -0.5),\\r\\n    vec2(0.5, -0.5)\\r\\n  );\\r\\n\\r\\n  return vec4f(pos[VertexIndex], 0.0, 1.0);\\r\\n}`,\\r\\n    }),\\r\\n  },\\r\\n  fragment: {\\r\\n    module: device.createShaderModule({\\r\\n      code: `@fragment\\r\\nfn main() -> @location(0) vec4f {\\r\\n  return vec4(1.0, 0.0, 0.0, 1.0);\\r\\n}`,\\r\\n    }),\\r\\n    targets: [{ format, }],\\r\\n  },\\r\\n  primitive: { topology: 'triangle-list' },\\r\\n});\\r\\n\\r\\nfunction frame() {\\r\\n  const commandEncoder = device.createCommandEncoder()\\r\\n  const textureView = context.getCurrentTexture().createView()\\r\\n\\r\\n  const renderPassDescriptor = {\\r\\n    colorAttachments: [\\r\\n      {\\r\\n        view: textureView,\\r\\n        clearValue: [0, 0, 0, 1],\\r\\n        loadOp: 'clear',\\r\\n        storeOp: 'store',\\r\\n      },\\r\\n    ],\\r\\n  }\\r\\n\\r\\n  const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor)\\r\\n  passEncoder.setPipeline(pipeline)\\r\\n  passEncoder.draw(3)\\r\\n  passEncoder.end()\\r\\n\\r\\n  device.queue.submit([commandEncoder.finish()])\\r\\n}\\r\\n\\r\\n\\r\\nconst loop = () => {\\r\\n  const w = canvas.width, h = canvas.height, t = now()\\r\\n  frame()\\r\\n  requestAnimationFrame(loop)\\r\\n}; requestAnimationFrame(loop)\"},{\"type\":\"ref\",\"line\":[1,11],\"value\":\"cfab8500f008cef36253efd4ef861367bee73364fcbb30f1688ae4cbdc21551a\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"第一个三角形！\",\"open\":true},{\"type\":\"ref\",\"line\":[1,11],\"value\":\"d8437a0a6403aa24ea29d8f5cc9b7b99217696828051522c7c532d8debfbadb3\",\"open\":true,\"content\":\"const { log, clear } = originconsole\\r\\nclear()\\r\\n\\r\\nconst canvas = await requestcanvas()\\r\\nconst adapter = await navigator.gpu.requestAdapter()\\r\\nconst device = await adapter.requestDevice()\\r\\nconst context = canvas.getContext('webgpu')\\r\\n\\r\\nconst format = navigator.gpu.getPreferredCanvasFormat()\\r\\ncontext.configure({ device, format, alphaMode: 'premultiplied' })\\r\\n\\r\\nconst now = () => performance.now() / 1000\\r\\non('canvasresize', ({ w, h }) => w !== 0 && h !== 0\\r\\n  ? (canvas.width = w, canvas.height = h) : 0)\\r\\n\\r\\nconst pipeline = device.createRenderPipeline({\\r\\n  layout: 'auto',\\r\\n  vertex: {\\r\\n    module: device.createShaderModule({\\r\\n      code: `@vertex\\r\\nfn main(@builtin(vertex_index) VertexIndex: u32) -> @builtin(position) vec4f {\\r\\n  var pos = array<vec2f, 3>(\\r\\n    vec2(0.0, 0.5), vec2(-0.5, -0.5), vec2(0.5, -0.5));\\r\\n  return vec4f(pos[VertexIndex], 0.0, 1.0);\\r\\n}`,\\r\\n    }),\\r\\n  },\\r\\n  fragment: {\\r\\n    module: device.createShaderModule({\\r\\n      code: `@fragment\\r\\nfn main() -> @location(0) vec4f {\\r\\n  return vec4(1.0, 0.0, 1.0, 1.0);\\r\\n}`,\\r\\n    }), targets: [{ format, }],\\r\\n  },\\r\\n  primitive: { topology: 'triangle-list' },\\r\\n});\\r\\n\\r\\nfunction frame() {\\r\\n  const commandEncoder = device.createCommandEncoder()\\r\\n  const textureView = context.getCurrentTexture().createView()\\r\\n\\r\\n  const renderPassDescriptor = {\\r\\n    colorAttachments: [\\r\\n      {\\r\\n        view: textureView,\\r\\n        clearValue: [0, 0, 0, 1],\\r\\n        loadOp: 'clear',\\r\\n        storeOp: 'store',\\r\\n      },\\r\\n    ],\\r\\n  }\\r\\n\\r\\n  const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor)\\r\\n  passEncoder.setPipeline(pipeline)\\r\\n  passEncoder.draw(3)\\r\\n  passEncoder.end()\\r\\n\\r\\n  device.queue.submit([commandEncoder.finish()])\\r\\n}\\r\\n\\r\\n\\r\\nconst loop = () => {\\r\\n  const w = canvas.width, h = canvas.height, t = now()\\r\\n  frame()\\r\\n  requestAnimationFrame(loop)\\r\\n}; requestAnimationFrame(loop)\"},{\"type\":\"ref\",\"line\":[1,11],\"value\":\"cfab8500f008cef36253efd4ef861367bee73364fcbb30f1688ae4cbdc21551a\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"GUI 开发计划：<div>  - webgpu：矢量图绘制</div><div>    - 最简单的状态下，绘制直线即可</div><div>    - 但是对于我那套2d sdf的算法来说，绘制三角形和贝塞尔曲线没有太大的区别，重点是解决图元在像素上的culling。</div><div>  - </div>\",\"open\":true},{\"type\":\"text\",\"value\":\"- 把执行窗口拖到文档外面<div>- 文档块成组</div><div>- 执行块带着引用的文件一起复制</div><div>- 给执行块加启动参数：用code snippet可以实现</div>\",\"name\":\"编辑器需求\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/worker_test/worker/webgpu1.js')\",\"open\":true},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"这样就能方便进行各种实验了！\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/worker_test/worker/webgpu2.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"用canvas实现的picking\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/gui_test/00.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"加载opentype.js用于解析字体文件<div>加载consolas.ttf作为示例字体</div><div>循环绘制字体中的所有字形</div>\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/gui_test/01.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"有了绘制单个字形的功能，我们就可以绘制完整的一行文字\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/gui_test/02.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"现在我们有了绘制单行文字的功能，可以来考虑一些基本的GUI组件了。<div>GUI组件在大小设定上有两种类型，一种是根据其内容占据一部分空间的“组件”，</div><div>还有一种是可以根据各种规则决定其大小的“容器”，</div><div>“组件”是相对简单的，应该对“容器”的规则进行分类。</div>\",\"open\":true},{\"type\":\"text\",\"value\":\"思考布局组件是否具有存在的必要：<div><div>如果布局并不在程序需要的状态里，那确实可以仅仅作为一种配置存在。</div></div><div>但是也存在类似可resize的布局系统，它的状态毫无疑问是程序状态的一部分，那么它应当是一个组件。</div><div>但即使它成为了一个组件，也不妨碍我们使用上面那套基于配置的布局系统。</div>\",\"name\":\"GUI设计\",\"open\":true},{\"type\":\"code\",\"links\":[],\"value\":\"// 示例组件代码\\r\\ncomponent.define(\\r\\n  // name, 创建组件时也要用到这个名称\\r\\n  'space-spliter',\\r\\n  // model, 包含所有数据，并且可以序列化\\r\\n  {\\r\\n    direction: 'horizontal',\\r\\n    barsize: 10,\\r\\n    children: [],\\r\\n    childsizes: [],\\r\\n  },\\r\\n  // view，输入模型数据，输出绘图指令，绑定交互事件，并负责判定脏标记的传播\\r\\n  m => {\\r\\n    log(m._size)\\r\\n    const h = m.direction === 'horizontal'\\r\\n    const base = (m._size[h ? 0 : 1] - (m.children.length - 1) * m.barsize) / m.children.length\\r\\n    const nonbase = m._size[h ? 1 : 0]\\r\\n    let i = 0; for (const c of m.children) {\\r\\n      const childbase = base * m.childsizes[i++]\\r\\n      const s = h ? [childbase, nonbase] : [nonbase, childbase]\\r\\n      if (deepequal(s, c._size)) { continue }\\r\\n      c._size = s; component.markdirty(c)\\r\\n    }\\r\\n\\r\\n  },\\r\\n  // transition，一个用于定义对模型可以做的操作的函数，操作会让模型变脏，因而需要更新\\r\\n  // 同时操作也承担着记录历史记录的作用\\r\\n  df => {\\r\\n    df('add', )\\r\\n    df('del', )\\r\\n    df('del', )\\r\\n  }\\r\\n)\",\"open\":true},{\"type\":\"text\",\"value\":\"\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/gui_test/04.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"GUI框架的设计工作基本结束了，剩下一些小修小补的事情可以在用的过程中慢慢做，现在的问题是需要有一个具体的开发目标。<div>要么是一个能拿来卖的实用工具。</div><div>要么是能吸引人眼球的有趣内容。</div><div><br></div><div>- 文本编辑器</div><div>  - 增量PEG解析器</div><div>  - 语法编辑/测试器</div><div>  - 着色/折叠/搜索替换</div><div>  - 允许非文本的东西存在于文本中</div><div>  - 结构化数据编辑</div><div>- 图编辑器<br></div><div><br></div><div>- 弹幕游戏编辑器</div><div>- PPT/视频编辑器</div><div>- DAW</div><div>- 文字冒险游戏编辑器</div><div>- 网页编辑器（主页）</div><div>- AI玩具</div><div>- 协作功能</div><div>- 爬虫编辑器</div><div>- 简单P图</div><div>- svg编辑/生成</div><div>- 小游戏微信小程序</div>\",\"name\":\"阶段总结\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/tool/writefont.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":false},{\"type\":\"text\",\"value\":\"<div style=\\\"background-color: rgb(255, 255, 254); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; line-height: 19px; text-wrap: nowrap;\\\"><div><span style=\\\"color: #cd3131;\\\">时间记录：</span></div><div>load consolas <span style=\\\"color: #098658;\\\">32.200000047683716</span></div><div>load <span style=\\\"color: #cd3131;\\\">思源黑体</span> <span style=\\\"color: #098658;\\\">32.60000014305115</span></div><div>parse consolas <span style=\\\"color: #098658;\\\">48.200000047683716</span></div><div>load consolas fin. <span style=\\\"color: #098658;\\\">84.10000014305115</span></div><div>parse <span style=\\\"color: #cd3131;\\\">思源黑体</span> <span style=\\\"color: #098658;\\\">231.70000004768372</span></div><div>load <span style=\\\"color: #cd3131;\\\">思源黑体</span> fin. <span style=\\\"color: #098658;\\\">384.5</span></div><br><div><span style=\\\"color: #cd3131;\\\">结论：加载字体文件和解析都消耗一定时间，尤其是中文字体</span></div><div><span style=\\\"color: #cd3131;\\\">建议将字体服务从沙盒中独立出来（对于worker似乎做不到）</span></div><div><span style=\\\"color: #cd3131;\\\">或者将应用设计为不等待字体加载就开始运行</span></div><div><span style=\\\"color: #cd3131;\\\">等字体文件加载完成之后更新渲染结果</span></div></div>\",\"name\":\"字体加载时间总结\",\"open\":true},{\"type\":\"text\",\"value\":\"想想有哪些GUI设施可以帮助webgpu开发：<div>- 打印中间结果</div><div>- 微任务编辑器</div><div>- 查看内存状态</div>\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/gui_test/fonttest.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"又是学习unicode的一天<div>🕵️‍♀️构成：<br><div><table class=\\\"table\\\" style=\\\"box-sizing: inherit;margin-bottom: 2.5rem;border-spacing: 0px;width: 760px;color: rgb(96, 108, 118);font-family: Roboto, &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif;font-size: 16px;letter-spacing: 0.16px;white-space-collapse: collapse;\\\"><tbody style=\\\"box-sizing: inherit;\\\"><tr style=\\\"box-sizing: inherit;\\\"><td style=\\\"box-sizing: inherit; border-bottom: 0.1rem solid rgb(225, 225, 225); padding: 1.2rem 0px 1.2rem 1.5rem; vertical-align: top;\\\"><ul class=\\\"char-mini-list\\\" style=\\\"box-sizing: inherit; list-style: none; margin-top: 0px; padding-left: 0px; margin-bottom: 2.5rem;\\\"><li style=\\\"box-sizing: inherit; margin-bottom: 1rem;\\\"><a href=\\\"https://unicode-explorer.com/c/1F575\\\" title=\\\"U+1F575 SLEUTH OR SPY\\\" style=\\\"box-sizing: inherit; color: rgb(155, 77, 202); text-decoration-line: none; display: flex;\\\"><div class=\\\"char-mini\\\" style=\\\"box-sizing: inherit; position: relative; color: rgb(96, 108, 118); background-color: rgb(255, 255, 255); border: 0.1rem solid rgb(155, 77, 202); border-radius: 0.2rem; font-family: &quot;Noto Sans script=all&quot;; width: 1.5em; height: 1.5em; text-align: center; line-height: 1.5em; margin-right: 0.5em; padding: 0px; text-wrap: nowrap; overflow: hidden;\\\">🕵</div><span style=\\\"box-sizing: inherit; text-decoration-line: underline;\\\">U+1F575 SLEUTH OR SPY</span></a></li><li style=\\\"box-sizing: inherit; margin-bottom: 1rem;\\\"><a href=\\\"https://unicode-explorer.com/c/FE0F\\\" title=\\\"U+FE0F VARIATION SELECTOR-16\\\" style=\\\"box-sizing: inherit; color: rgb(155, 77, 202); text-decoration-line: none; display: flex;\\\"><div class=\\\"char-mini\\\" style=\\\"box-sizing: inherit; position: relative; color: rgb(96, 108, 118); background-color: rgb(255, 255, 255); border: 0.1rem solid rgb(155, 77, 202); border-radius: 0.2rem; font-family: &quot;Noto Sans script=all&quot;; width: 1.5em; height: 1.5em; text-align: center; line-height: 1.5em; margin-right: 0.5em; padding: 0px; text-wrap: nowrap; overflow: hidden;\\\">️</div><span style=\\\"box-sizing: inherit; text-decoration-line: underline;\\\">U+FE0F VARIATION SELECTOR-16</span></a></li><li style=\\\"box-sizing: inherit; margin-bottom: 1rem;\\\"><a href=\\\"https://unicode-explorer.com/c/200D\\\" title=\\\"U+200D ZERO WIDTH JOINER\\\" style=\\\"box-sizing: inherit; color: rgb(155, 77, 202); text-decoration-line: none; display: flex;\\\"><div class=\\\"char-mini\\\" style=\\\"box-sizing: inherit; position: relative; color: rgb(96, 108, 118); background-color: rgb(255, 255, 255); border: 0.1rem solid rgb(155, 77, 202); border-radius: 0.2rem; font-family: &quot;Noto Sans script=all&quot;; width: 1.5em; height: 1.5em; text-align: center; line-height: 1.5em; margin-right: 0.5em; padding: 0px; text-wrap: nowrap; overflow: hidden;\\\">‍</div><span style=\\\"box-sizing: inherit; text-decoration-line: underline;\\\">U+200D ZERO WIDTH JOINER</span></a></li><li style=\\\"box-sizing: inherit; margin-bottom: 1rem;\\\"><a href=\\\"https://unicode-explorer.com/c/2640\\\" title=\\\"U+2640 FEMALE SIGN\\\" style=\\\"box-sizing: inherit; color: rgb(155, 77, 202); text-decoration-line: none; display: flex;\\\"><div class=\\\"char-mini\\\" style=\\\"box-sizing: inherit; position: relative; color: rgb(96, 108, 118); background-color: rgb(255, 255, 255); border: 0.1rem solid rgb(155, 77, 202); border-radius: 0.2rem; font-family: &quot;Noto Sans script=all&quot;; width: 1.5em; height: 1.5em; text-align: center; line-height: 1.5em; margin-right: 0.5em; padding: 0px; text-wrap: nowrap; overflow: hidden;\\\">♀</div><span style=\\\"box-sizing: inherit; text-decoration-line: underline;\\\">U+2640 FEMALE SIGN</span></a></li><li style=\\\"box-sizing: inherit; margin-bottom: 1rem;\\\"><a href=\\\"https://unicode-explorer.com/c/FE0F\\\" title=\\\"U+FE0F VARIATION SELECTOR-16\\\" style=\\\"box-sizing: inherit; color: rgb(155, 77, 202); text-decoration-line: none; display: flex;\\\"><div class=\\\"char-mini\\\" style=\\\"box-sizing: inherit; position: relative; color: rgb(96, 108, 118); background-color: rgb(255, 255, 255); border: 0.1rem solid rgb(155, 77, 202); border-radius: 0.2rem; font-family: &quot;Noto Sans script=all&quot;; width: 1.5em; height: 1.5em; text-align: center; line-height: 1.5em; margin-right: 0.5em; padding: 0px; text-wrap: nowrap; overflow: hidden;\\\">️</div><span style=\\\"box-sizing: inherit; text-decoration-line: underline;\\\">U+FE0F VARIATION SELECTOR-16</span></a></li></ul></td></tr></tbody></table>上面三行分别为我画的，opentype.js画的，canvas画的</div><div>opentype.js处理文本的方式：</div></div><div>根据unicode和字体设置的特性（连字等）将text分解为token，一个token对应一个最终的glyph</div><div>对于字体的缩放设置：未知，但得到了正确实现</div><div>补充：font.unitsPerEm描述了字体的相对大小</div>\",\"open\":true},{\"type\":\"text\",\"value\":\"好 我知道下一个项目做什么了<div>回到开始的地方：图布局</div><div>不过这次要把它做到真正成熟</div>\",\"open\":true},{\"type\":\"code\",\"links\":[],\"value\":\"// 提出一种简化代码启动的方法\\r\\n// 让代码开头有一段启动脚本，类似这样：\\r\\n//#! Object.assign($, await require('../boot.js'))\\r\\n//#! loadworker(__self_content__)\\r\\n\\r\\n// actual content\\r\\nconsole.log(`I'm in a worker.`)\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/gui_test/05.js')\",\"open\":false},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/gui_test/06.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"上面的程序实现了对图的hierarchy ranking，下面根据ranking结果生成布局\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/gui_test/07.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/gui_test/08.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/gui_test/09.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"虽然还没有实现层内排序，但我觉得这个布局算法的效果没有力导布局的好\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/gui_test/10.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"加入了层内排序，但效果嘛……只能说很擅长创造一些完全无法阅读的non-sense\",\"open\":true},{\"type\":\"text\",\"value\":\"就还是回归力导布局的怀抱吧\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/gui_test/11.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"所以到底为什么，这边的代码无论如何都不工作\",\"open\":true},{\"type\":\"exec\",\"value\":\"9000a4e65efadb06bd7c057d0a51f16274237f80d172834c0f348b7da85225da\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/gui_test/12.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"终于找到毛病了我操啊花了我一整天在这破事上面\",\"open\":true},{\"type\":\"code\",\"links\":[\"6cf3c1f4597df47cf030626c829fe052312762e79f0533966571df339129604c\"],\"value\":\"Object.assign($, await require('0/boot.js'))\\r\\nloadworker('0/gui_test/13.js')\",\"open\":false},{\"type\":\"exec\",\"value\":\"block above\",\"open\":true},{\"type\":\"text\",\"value\":\"移动到下面的执行窗口指向的文档继续工作。\",\"open\":true},{\"type\":\"exec\",\"value\":\"8aed315812d9d12a3417922898d2fe9616c8bbf9b18c8507e735f7e5970afe15\",\"open\":true},{\"type\":\"text\",\"value\":\"<div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div>\",\"name\":\"留出滚动距离\",\"open\":true}]"}