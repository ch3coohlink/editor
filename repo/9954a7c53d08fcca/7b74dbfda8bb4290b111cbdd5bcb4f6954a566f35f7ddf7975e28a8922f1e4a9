{"id":"7b74dbfda8bb4290b111cbdd5bcb4f6954a566f35f7ddf7975e28a8922f1e4a9","to":[],"value":"Object.assign($, await require('lib/common.js'))\r\nObject.assign($, await require('comp.js'))\r\nroot.style.overflow = 'hidden'\r\nconsole.clear()\r\n\r\n$.framecount = 0\r\nconst loop = () => {\r\n  if ($.frame) { framecount++; frame() }\r\n  requestAnimationFrame(loop)\r\n}; requestAnimationFrame(loop)\r\n\r\n$.dragprocess = (move, cancel) => {\r\n  const c = e => (off('pointermove', mi),\r\n    off('pointerup', ui), off('pointercancel', ci), cancel?.(e))\r\n  const mi = on('pointermove', move)\r\n  const ui = on('pointerup', c)\r\n  const ci = on('pointercancel', c)\r\n}\r\n$.expdecay = (a, b, d, dt) => b + (a - b) * Math.exp(-d * dt)\r\n$.formatkeyevent = (e, up) => e.key.toLowerCase() + (up ? 'up' : [\r\n  e.altKey, e.ctrlKey, e.shiftKey].map(v => v ? 't' : 'f').join(''))\r\n\r\n{\r\n  // TODO: color class\r\n  const { max, min } = Math; $.clamp = (v, s, l) => max(min(v, l), s)\r\n  $.itp = (a, b, t) => (t = clamp(t, 0, 1), a + t * (b - a))\r\n  $.itp3 = (a, b, t) => (t = clamp(t, 0, 1),\r\n    [a[0] + t * (b[0] - a[0]), a[1] + t * (b[1] - a[1]), a[2] + t * (b[2] - a[2])])\r\n\r\n  $.callhotkey = (m, k, e) => {\r\n    while (m) {\r\n      if (m._hotkey[k]) {\r\n        return m._hotkey[k]?.(e)\r\n      } m = m.parent\r\n    }\r\n  }\r\n}\r\n\r\nroot.setAttribute('style', `display:flex;height:100%;`)\r\nconst strip = { a: '#aaa', b: '#777', c: 15 }, tew = 45\r\nroot.append(\r\n  $.modeleditor = h('textarea', {\r\n    js: {\r\n      onchange: () => { reload(true) },\r\n      onkeydown: e => {\r\n        if (formatkeyevent(e) !== 'sftf') { return }\r\n        e.preventDefault()\r\n        save()\r\n      },\r\n    }, style: `resize:horizontal;white-space:pre;width:${tew}%;\r\n      font-family:consolas;font-size:12px;`\r\n  }),\r\n  h('div', {\r\n    style: `width:${100 - tew}%;\r\n      background: repeating-linear-gradient(\r\n        -45deg, ${strip.a}, ${strip.a} ${strip.c}px,\r\n        ${strip.b} ${strip.c}px, ${strip.b} ${strip.c * 2}px);\r\n      display: flex; justify-content: center; align-items: center;`\r\n  },\r\n    $.sandbox = h('div', {\r\n      style: `resize:both;overflow:hidden;\r\n        width:calc(100% - 50px);height:calc(100% - 50px);\r\n        max-width:calc(100% - 10px);max-height:calc(100% - 10px);\r\n        box-shadow: 0 0 10px #494949;\r\n        background:white;`\r\n    })\r\n  )\r\n)\r\n\r\nconst compdir = await read('comp', { raw: true })\r\nconst version = $$.vcs.getversion(compdir)\r\nlet filelist; const reload = async (force = true) => {\r\n  const od = component.definition; component.definition = {}\r\n  const d = await dir('comp'); await Promise.all(d.map(n =>\r\n    require('comp/' + n, { forceload: true, watch: false })))\r\n  filelist = new Set(await Promise.all(d.map(n =>\r\n    read('comp/' + n, { raw: true }).then(a => a.id))))\r\n  if (force) { await rebuildall() } else {\r\n    const ks = Object.keys(component.definition)\r\n    const changed = { model: new Map, view: new Set, trans: new Set }\r\n    for (const k of ks) {\r\n      const a = od[k], b = component.definition[k]\r\n      if (!a || !deepequal(a.model, b.model)) {\r\n        changed.model.set(k, component.diffstate(a?.model, b.model))\r\n      } if (!a || String(a.view) !== String(b.view)) { changed.view.add(k) }\r\n      if (!a || a.trans._transdef !== b.trans._transdef) { changed.trans.add(k) }\r\n    } if (component.rebuild(changed)) { await rebuildall() } else {\r\n      log('---reload view---')\r\n    }\r\n  } if (!component.root) { return }\r\n  sb.env.root.append(component.root._view)\r\n}\r\nconst rebuildall = async () => {\r\n  log(`---reload model---`)\r\n  await sb.exec({ component, h })\r\n  sb.env.root.style.overflow = 'hidden'\r\n}\r\n\r\nconst getfile = () => {\r\n  const i = version.id\r\n  return ['$$virtual$$.js', modeleditor.value, i, [version.id]]\r\n}, sb = $$.sandboxtab($$.vcs, { type: 'virtual', getfile })\r\nsb.registersandboxclear($)\r\nsandbox.append(sb)\r\n\r\nconst save = () => { }\r\nconst load = async () => { }\r\n\r\nmodeleditor.value = `\r\nObject.assign($, await require('lib/common.js'))\r\ncomponent.root = h('comp@component-editor', { path: 'comptest' })\r\nroot.append(component.root._view)\r\nconst m = component.root\r\n  ._view.childNodes[0]._comp\r\n  ._view.childNodes[0]._comp\r\nm.data.getctx('ctxmenu')\r\n  .openctxmenu([400, 600], m.data.contextmenu())\r\n`.trim()\r\n\r\nawait load()\r\nawait reload(true)\r\n\r\non('file change', ({ o }) => {\r\n  if (o.id === compdir.id || filelist.has(o.id)) { reload() }\r\n})\r\n\r\nlet pt = now(); $.frame = () => {\r\n  const t = now(), dt = t - pt; pt = t\r\n}"}