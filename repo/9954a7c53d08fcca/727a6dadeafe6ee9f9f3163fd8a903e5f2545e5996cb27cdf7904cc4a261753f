{"id":"727a6dadeafe6ee9f9f3163fd8a903e5f2545e5996cb27cdf7904cc4a261753f","to":[],"value":"Object.assign($, await require('../util/common.js'))\r\nconst compsys = await require('../util/component.js')\r\nconst grd = await require('../util/random.js')\r\nconsole.clear()\r\n\r\nlet framecount = 0\r\nconst loop = () => {\r\n  if ($.frame) { framecount++; frame() }\r\n  requestAnimationFrame(loop)\r\n}; requestAnimationFrame(loop)\r\n\r\n$.cvs = await createcanvas()\r\n$.ctx = cvs.getContext('2d', { willReadFrequently: true })\r\n$.component = compsys.createcomponentsystem({ cvs, ctx })\r\n\r\ncomponent.define('graph', {\r\n  node: [], edge: [],\r\n  vnode: [], vedge: [],\r\n}, df => (\r\n  df('add', (m, d, n = component.create('graph-node',\r\n    nm => (nm.parent = m, nm.data = d, nm.ranksum = 0, nm.rankcount = 0))) => (m.node.push(n), n)),\r\n  df('link', (m, a, b, d, e = component.create('graph-edge',\r\n    em => (em.parent = m, em.from = a, em.to = b, em.data = d))) =>\r\n    (a.to.push(e), b.from.push(e), m.edge.push(e), e))),\r\n  m => {\r\n    // log(m._size)\r\n    return []\r\n  })\r\nconst rankrd = grd.genrd()\r\nconst splitgraph = m => { }\r\nconst rankgraph = m => {\r\n  if (framecount > 5) { return }\r\n  const si = rankrd.rdi(m.node.length)\r\n  const seen = new Set\r\n  let rank = 0\r\n  const rk = n => {\r\n    if (seen.has(n)) { return } seen.add(n)\r\n    log('enter dfs', n.id, 'to', n.to.map(e => e.to.id))\r\n    for (const { to } of n.to) {\r\n      log('dfs next', n.id, to.id)\r\n      to.ranksum += (rank -= 1)\r\n      to.rankcount++\r\n      rk(to)\r\n    }\r\n  }\r\n  for (let i = 0, l = m.node.length; i < l; i++) {\r\n    let j = si + i; if (j >= l) { j = j - l }\r\n    log('big loop', j)\r\n    rk(m.node[j])\r\n  }\r\n  log(si, ...m.node.map(n => [n.rankcount !== 0 ? n.ranksum / n.rankcount : 0, n.ranksum, n.rankcount]))\r\n  rankrd.next()\r\n}\r\n\r\ncomponent.define('graph-node', { from: [], to: [] }, df => {\r\n  df('link', (m, t, e) => parent.link(m.node, t, e), false)\r\n}, m => {\r\n  return []\r\n})\r\n\r\ncomponent.define('graph-edge', _, _, m => {\r\n  return []\r\n})\r\n\r\nconst g = component.create('graph')\r\ncomponent.root = g\r\n\r\n{\r\n  const a = g.add()\r\n  const b = g.add()\r\n  const c = g.add()\r\n  g.link(a, b)\r\n  g.link(a, c)\r\n  g.link(b, c)\r\n\r\n  log(...g.node.map((n, i) => [i, n.id]))\r\n  log(...g.edge.map(({ from, to }) => [from.id, to.id]))\r\n}\r\n\r\n$.frame = () => {\r\n  rankgraph(g)\r\n  component.frame()\r\n}"}