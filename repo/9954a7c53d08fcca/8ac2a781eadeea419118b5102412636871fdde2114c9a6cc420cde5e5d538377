{"id":"8ac2a781eadeea419118b5102412636871fdde2114c9a6cc420cde5e5d538377","to":[],"value":"const now = () => performance.now() / 1000\r\nconst { log, clear } = originconsole\r\nclear()\r\n\r\nconst local = n => globalThis.location.origin + '/' + n\r\nlet consolas = fetch(local('assets/font/consolas.ttf'))\r\nimportScripts(local('external/opentype.js'))\r\n\r\nconst cvs = await requestcanvas()\r\nconst ctx = cvs.getContext('2d', { willReadFrequently: true })\r\nlet devicePixelRatio = await requestdpi()\r\non('canvasresize', ({ w, h, dpi }) => w !== 0 && h !== 0\r\n  ? (cvs.width = w, cvs.height = h, devicePixelRatio = dpi) : 0)\r\n\r\nconst loop = () => {\r\n  frame()\r\n  requestAnimationFrame(loop)\r\n}; requestAnimationFrame(loop)\r\n\r\nconsolas = await consolas\r\nif (consolas.status !== 200) { throw Error('fail to load font file') }\r\nconsolas = opentype.parse(await consolas.arrayBuffer())\r\nconst glyphs = Object.values(consolas.glyphs.glyphs)\r\nconst unicodetable = new Map\r\nfor (const g of glyphs) {\r\n  if (g.unicode) {\r\n    unicodetable.set(g.unicode, g)\r\n  }\r\n}\r\nlog(now())\r\n\r\nconst drawglyph = g => {\r\n  ctx.beginPath()\r\n  for (const c of g.path.commands) {\r\n    switch (c.type) {\r\n      case 'M': ctx.moveTo(c.x, c.y); break\r\n      case 'L': ctx.lineTo(c.x, c.y); break\r\n      case 'Q': ctx.quadraticCurveTo(c.x1, c.y1, c.x, c.y); break\r\n      case 'Z': break\r\n      default: log(c); throw Error(`unknown path command type: ${c.type}`)\r\n    }\r\n  }\r\n  ctx.fill()\r\n}\r\n\r\nlog(glyphs[0])\r\n\r\nlet i = 0\r\n// ctx.fillStyle = '#00000001'\r\nconst frame = () => {\r\n  const cw = cvs.width, ch = cvs.height\r\n  ctx.resetTransform()\r\n  ctx.clearRect(0, 0, cw, ch)\r\n  if (i >= glyphs.length) { i = 0 }\r\n  const g = glyphs[i++]\r\n  const s = 0.1, w = g.advanceWidth * s\r\n  ctx.transform(s, 0, 0, -s, (cw - w) / 2, (ch + w) / 2)\r\n  drawglyph(g)\r\n}"}