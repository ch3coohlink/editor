{"id":"716221c111ab981f28e8ba395455b098071864130eb451d78aa800e11f5bbabd","to":[],"value":"Object.assign($, await require('common.js'))\r\n\r\nconst local = n => globalThis.location.origin + '/' + n\r\nimportScripts(local('external/opentype.js'))\r\n\r\nconst fonts = {}\r\nconst loadfont = async (n, p) => {\r\n  let font = await fetch(local(p))\r\n  if (font.status !== 200) { throw Error(`Fail to load font file: ${n} at path: ${p}`) }\r\n  font = opentype.parse(await font.arrayBuffer())\r\n  font.defaultglyph = font.glyphs.glyphs[0], fonts[n] = font\r\n  font.scalefactordiv1 = (font.unitsPerEm ?? 1000) / 1000\r\n  font.scalefactor = 1 / font.scalefactordiv1\r\n}\r\n\r\nawait Promise.all([\r\n  loadfont('consolas', 'assets/font/consolas.ttf'),\r\n  // loadfont('思源黑体', 'assets/font/SourceHanSansHWSC-Regular.otf'),\r\n])\r\n\r\nconst drawglyph = (ctx, g) => {\r\n  ctx.beginPath()\r\n  for (const c of g.path.commands) {\r\n    switch (c.type) {\r\n      case 'M': ctx.moveTo(c.x, c.y); break\r\n      case 'L': ctx.lineTo(c.x, c.y); break\r\n      case 'Q': ctx.quadraticCurveTo(c.x1, c.y1, c.x, c.y); break\r\n      case 'C': ctx.bezierCurveTo(c.x1, c.y1, c.x2, c.y2, c.x, c.y); break\r\n      case 'Z': break\r\n      default: log(c); throw Error(`unknown path command type: ${c.type}`)\r\n    }\r\n  }\r\n  ctx.fill()\r\n}\r\nconst defaultglyph = fonts['consolas'].defaultglyph\r\nconst usingfonts = ['consolas', '思源黑体'].map(n => fonts[n]).filter(v => v)\r\n$.drawtext = (ctx, t, x, y, px = 10) => {\r\n  const a = splitunicode(t), s = px / 1000\r\n  ctx.save(); ctx.transform(s, 0, 0, -s, x, y)\r\n  for (const t of a) {\r\n    const c = t.codePointAt(0); let usefont, g\r\n    for (const f of usingfonts) {\r\n      const i = f.tables.cmap.glyphIndexMap[c]\r\n      if (g = f.glyphs.glyphs[i]) { usefont = f; break }\r\n    } if (!g) { g = defaultglyph, usefont = fonts.consolas }\r\n    ctx.scale(usefont.scalefactor, usefont.scalefactor)\r\n    drawglyph(g); ctx.translate(g.advanceWidth, 0)\r\n    ctx.scale(usefont.scalefactordiv1, usefont.scalefactordiv1)\r\n  } ctx.restore()\r\n}"}