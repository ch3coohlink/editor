{"id":"0a5d693d0c77efc1232d872d830ad5b7312819d44f937f96c9e4e73a88641394","to":[],"value":"Object.assign($, await require('../lib/common.js'))\r\nObject.assign($, await require('../comp.js'))\r\n\r\ncomponent.define('placeincenter', _, _,\r\n  m => h('div', {\r\n    style: `height:100%;width:100%;display:flex;\r\n      justify-content: center;align-items: center;`\r\n  }, m.child))\r\n\r\ncomponent.define('button', (m, text) => { m.text = text }, _,\r\n  m => h('button', {\r\n    js: {\r\n      textContent: 'hello comp',\r\n      onclick: log,\r\n    }, style: `\r\n      border:1px solid black; padding:0.5em;\r\n      border-radius: 0.5em; background: none;`\r\n  }), {\r\n})\r\n\r\ncomponent.define('infinite-canvas', _, _, _)\r\n\r\ncomponent.define('component-editor', _, df => {\r\n  df('openctxmenu', (m, ...a) => m._ctxmenu.open(...a))\r\n}, m => h('div', {\r\n  style: `width:100%;height:100%;position:relative;`,\r\n}, h('comp@file-system-tree', { path: m.path, parent: m }),\r\n  h('comp@text-editor', { parent: m }),\r\n  h('comp@component-previewer', { parent: m }),\r\n  m._ctxmenu = h('comp@context-menu', { parent: m }),\r\n), { static: { _ctx: 'ctxmenu' } })\r\n\r\ncomponent.define('text-editor', _, _, m => h('textarea', {\r\n  style: 'display:block;'\r\n}))\r\n\r\ncomponent.define('component-previewer', _, _, m => h('div', _, 'preview'))\r\n\r\ncomponent.define('context-menu', m => m.show = false, df => {\r\n  df('open', (m, e, ctx) => {\r\n    m._view.style.display = ''\r\n    const r = m._view.getBoundingClientRect()\r\n    let [x, y] = Array.isArray(e) ? e : [e.pageX - r.left, e.pageY - r.top]\r\n    const v = m._menu, a = ctx.map(a => [\r\n      h('div', {\r\n        style: `margin:5px;`,\r\n      }, ...a.map(({ text, on, disable }) =>\r\n        h('div', {\r\n          js: {\r\n            onclick: disable ? _ : () => { try { on() } finally { m.close() } },\r\n            onpointerenter: disable ? _ : e => e.target.style.background = '#00000011',\r\n            onpointerleave: disable ? _ : e => e.target.style.background = '',\r\n          },\r\n          style: `${disable ? `color:#777;` : 'cursor:pointer;'}padding:5px;`,\r\n        }, text))),\r\n      h('div', {\r\n        style: `height:${1 / devicePixelRatio}px;\r\n          background:#777;margin:5px;` }),\r\n    ]).flat(); a.pop(); v.append(...a)\r\n    const vr = v.getBoundingClientRect()\r\n    if (x + vr.width > r.width) { x -= vr.width; }\r\n    if (y + vr.height > r.height) { y = vr.height }\r\n    v.style.transform = `translate(${x}px, ${y}px)`\r\n  })\r\n  df('close', m => (m._menu.innerHTML = '', m._view.style.display = 'none'))\r\n  df('_close', m => e => e.target === m._view ? m.close() : 0)\r\n}, m => h('div', {\r\n  oncontextmenu: 'return false',\r\n  style: `display:none;user-select:none;\r\n    position: absolute;top:0px;left:0px;\r\n    width:100%;height:100%;`,\r\n  js: { onclick: m._close(), onauxclick: m._close() },\r\n}, m._menu = h('div', {\r\n  style: `position: absolute;top:0px;left:0px;\r\n    overflow-x:hidden;overflow-y:auto;\r\n    max-width:300px;\r\n    min-height:100px;max-height:100%;\r\n    background:white;\r\n    box-shadow: #00000033 0 5px 10px;\r\n    `,\r\n})))\r\n\r\ncomponent.define('file-system-tree', _, df => {\r\n  df('getpaste', m => {\r\n\r\n  })\r\n}, m => h('div', _,\r\n  h('comp@tree-item', {\r\n    data: h('comp@file-system-item', { path: m.path, system: m, parent: m }),\r\n  }),\r\n))\r\n\r\ncomponent.define('file-system-item', _, df => {\r\n  df('name', (m, i = m.path.lastIndexOf('/')) => i < 0 ? m.path : m.path.slice(i))\r\n  df('children', async m => Promise.all(await dir(m.path).map(async n => {\r\n    const p = m.path + '/' + n\r\n    // await read(p)\r\n    const data = h('comp@file-system-item', { path: n, system: m.system, parent: m })\r\n    return h('comp@tree-item', { data })\r\n  })))\r\n  df('contextmenu', m => [[\r\n    { text: 'New file...', on: () => m.newfile('file') },\r\n    { text: 'New Folder...', on: () => m.newfile('dir') },\r\n  ], [\r\n    { text: 'Cut', on: () => log('Cut') },\r\n    { text: 'Copy', on: () => log('Copy') },\r\n    { text: 'Paste', on: () => log('Paste'), disable: !m.system.getpaste() },\r\n  ], [\r\n    { text: 'Rename', on: () => log('Rename') },\r\n    { text: 'Delete', on: () => log('Delete') },\r\n  ]])\r\n})\r\n\r\ncomponent.define('tree-item', m => m.open = false, df => {\r\n  df('_open_transform', m => `rotate(${m.open ? 90 : 0}deg)`)\r\n  df('toggle', async (m, flag) => {\r\n    m.open = flag ??= !m.open\r\n    m._open.style.transform = m._open_transform()\r\n    const c = await m.data.children()\r\n    if (m.open) { m._child.append(...c.map(v => component.render(v))) }\r\n    else { m._child.innerHTML = '' }\r\n  })\r\n}, m => h('div', {\r\n  js: {\r\n    onclick: () => m.toggle(),\r\n    oncontextmenu: e => {\r\n      e.preventDefault()\r\n      m.data.getctx('ctxmenu').openctxmenu(e, m.data.contextmenu())\r\n    },\r\n  },\r\n  style: `cursor: pointer; user-select: none; position: relative;`,\r\n},\r\n  m._open = h('span', {\r\n    style: `position: absolute;\r\n      transform: ${m._open_transform()};`,\r\n  }, '>'),\r\n  h('span', {\r\n    style: `margin-left: 15px`\r\n  }, m.data.name()),\r\n  m._child = h('div', {\r\n    style: `margin-left: 15px`,\r\n  })\r\n))\r\n\r\ncomponent.define('leaf-item', _, _,\r\n  m => h('div',\r\n    { js: { onclick: () => data?.onclick?.() }, },\r\n    m.data.name()))\r\n\r\ncomponent.define('', _, _, _)"}