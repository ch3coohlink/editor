{"id":"3e473ae5789429a6ebe4143e1263f7158512a56bbc3c3727d483597a4ffb88e2","to":[],"value":"Object.assign($, await require('../lib/common.js'))\r\nObject.assign($, await require('../comp.js'))\r\n\r\nconst { exp, abs, log10, floor, ceil, round, min, max } = Math\r\n// const expdecay = (a, b, r, dt, d = abs(a - b)) => d < 1e-5 ? b : b + d * exp(-r * dt)\r\n\r\ncomponent.define('placeincenter', (m, c) => m.child = c, _,\r\n  m => h('div', {\r\n    style: `height:100%;display:flex;\r\n      justify-content: center;align-items: center;`\r\n  }, m.child))\r\n\r\ncomponent.define('top', _, df => {\r\n\r\n}, m => { })\r\n\r\nconst ematchsize = (t, e, f) => {\r\n  const cd = e.childNodes; if (t > cd.length) {\r\n    e.append(...[...new Array(t - cd.length).keys()].map(f))\r\n  } else if (t < cd.length) {\r\n    [...cd].slice(t).forEach(c => c.remove())\r\n  } return cd\r\n}\r\n\r\ncomponent.define('infinite-panel', m => {\r\n  m.camera = [0, 0, 1], m.realcamera = [...m.camera]\r\n}, df => {\r\n  df('offset', (m, e, v = m._view,\r\n    r = v.getBoundingClientRect(), s = v.clientWidth / r.width) =>\r\n    [(e.pageX - r.left) * s, (e.pageY - r.top) * s])\r\n  df('zoom', (m, e, r, [x, y] = Array.isArray(e) ? e : m.offset(e), s) => (\r\n    Array.isArray(e) ? 0 : (s = m.halfsize(), x -= s[0], y -= s[1]),\r\n    m.camera[2] *= r, // equation: y - nsy === (y - sy) * r\r\n    m.camera[0] = x - (x - m.camera[0]) * r,\r\n    m.camera[1] = y - (y - m.camera[1]) * r, m.setcamera()))\r\n  df('setcamera', (m, c = m.camera) => (m.camera = c,\r\n    m.animation('move', (dt, t, st) => (\r\n      m.camera.forEach((v, i) => m.realcamera[i]\r\n        = expdecay(m.realcamera[i], v, 16, dt)),\r\n      m._canvas.style.transform = `translate(50%, 50%) ` +\r\n      `translate(${m.realcamera[0] + 'px'}, ${m.realcamera[1] + 'px'}) ` +\r\n      `scale(${m.realcamera[2]})`, m.coordbg(),\r\n      t - st > .5 || deepequal(m.camera, m.realcamera)),\r\n      () => m.realcamera = [...m.camera])))\r\n  df('halfsize', m => [m._view.clientWidth / 2, m._view.clientHeight / 2])\r\n  df('out2in', (m, x, y, [cx, cy, s] = m.realcamera, [w, h] = m.halfsize()) =>\r\n    [(x - cx - w) / s, (y - cy - h) / s])\r\n  df('coordbg', m => {\r\n    const [w, h] = m.halfsize()\r\n    const [lf, tp] = m.out2in(0, 0), [rt, bt] = m.out2in(2 * w, 2 * h)\r\n    const s = m.realcamera[2], sr = 10 ** -ceil(log10(s)), l = s * sr\r\n    const ta = [1, 0.55, 0.1], ti = ta\r\n      .map((v, i) => [abs(l - v), i]).sort(([a], [b]) => a - b)[0][1]\r\n    const sw = 1 / s, sg = [5, 4, 5][ti]\r\n    const st = sr * [20, 50, 100][ti], t = st * sg\r\n    const hr = [], vt = [], hrs = [], vts = []\r\n    for (let s = ceil(lf / st) * st, i = sg - round((floor(lf / t) * t - s) / st)\r\n      ; s < rt; s += st, i++) { (i % sg === 0 ? hr : hrs).push(s) }\r\n    for (let s = ceil(tp / st) * st, i = sg - round((floor(tp / t) * t - s) / st)\r\n      ; s < bt; s += st, i++) { (i % sg === 0 ? vt : vts).push(s) }\r\n    const dc = '#555', lc = '#aaa', a = [...ematchsize(\r\n      hr.length + hrs.length + vt.length + vts.length,\r\n      m._background, () => component.h('svg@path'))]\r\n    let i = 0, f = (e, x1, y1, x2, y2, s, sw) => {\r\n      e.setAttribute('d', `M ${x1} ${y1} L ${x2} ${y2}`)\r\n      e.setAttribute('stroke', s)\r\n      e.setAttribute('stroke-width', sw + 'px')\r\n    }; a.slice(i, i += hr.length).forEach((e, i) => f(e, hr[i], tp, hr[i], bt, dc, sw))\r\n    a.slice(i, i += hrs.length).forEach((e, i) => f(e, hrs[i], tp, hrs[i], bt, lc, sw / 2))\r\n    a.slice(i, i += vt.length).forEach((e, i) => f(e, lf, vt[i], rt, vt[i], dc, sw))\r\n    a.slice(i, i += vts.length).forEach((e, i) => f(e, lf, vts[i], rt, vts[i], lc, sw / 2))\r\n  })\r\n}, m => (setTimeout(() => m.setcamera()),\r\n  h('div', {\r\n    js: {\r\n      onwheel: (e, r = m.zoomfactor) => (\r\n        m.zoom(e, e.deltaY < 0 ? r : 1 / r), e.preventDefault()),\r\n      onpointerdown: e => { },\r\n      // TODO: onresize polyfill\r\n      onresize: () => m.setcamera(),\r\n    },\r\n    style: `height:100%;`,\r\n  },\r\n    h('comp@placeincenter', _,\r\n      h('svg@svg', { style: `width:100%;height:100%;` },\r\n        m._canvas = h('svg@g', _,\r\n          m._background = h('svg@g'),\r\n          ...[...new Array(1000).keys()].map(() =>\r\n            h('svg@circle', { cx: grd.rd(-1000, 1000), cy: grd.rd(-1000, 1000), r: 10 }))\r\n        )\r\n      )\r\n    ),\r\n  )),\r\n  { static: { zoomfactor: 1.2 } })\r\n\r\ncomponent.define('graph')\r\ncomponent.define('graph-node')\r\ncomponent.define('graph-edge')"}