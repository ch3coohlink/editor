{"id":"1127b6ab29d720273a06da7cd24ab9c8eed5e226c8c50e6414f9fd76d0d3defa","to":[],"value":"$.deepclone = (...a) => structuredClone(...a)\r\n$.deepequal = (a, b) => {\r\n  if (a === b) { return true } else if (\r\n    typeof a === \"object\" && a !== null && typeof b === \"object\" && b !== null) {\r\n    const ka = Object.keys(a)\r\n    if (ka.length !== Object.keys(b).length) { return false }\r\n    for (const k of ka) {\r\n      if (b.hasOwnProperty(k)) { if (!deepequal(a[k], b[k])) { return false } }\r\n      else { return false }\r\n    } return true\r\n  } else { return false }\r\n}\r\n\r\nconst _segmenter = new Intl.Segmenter(\"en\", { granularity: 'grapheme' })\r\n$.splitunicode = t => Array.from(_segmenter.segment(t), ({ segment }) => segment)\r\n\r\n$._ = undefined\r\n$.log = originconsole.log\r\n$.now = () => performance.now() / 1000\r\n$.wait = t => new Promise(r => setTimeout(r, t))\r\n\r\n$.createcanvas = async () => {\r\n  const cvs = await requestcanvas()\r\n  cvs.dpi = await requestdpi()\r\n  cvs.needresize = true\r\n  on('canvasresize', () => cvs.needresize = true)\r\n  on('canvasresize', ({ w, h, dpi }) => w !== 0 && h !== 0\r\n    ? (cvs.width = w, cvs.height = h, cvs.dpi = dpi) : 0)\r\n  return cvs\r\n}"}