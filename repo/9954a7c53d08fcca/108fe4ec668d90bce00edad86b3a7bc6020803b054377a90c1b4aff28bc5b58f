{"id":"108fe4ec668d90bce00edad86b3a7bc6020803b054377a90c1b4aff28bc5b58f","to":[],"value":"Object.assign($, await require('../lib/common.js'))\r\nObject.assign($, await require('../comp.js'))\r\n\r\nconst { exp } = Math\r\nconst expdecay = (a, b, d, dt) => b + (a - b) * exp(-d * dt)\r\n\r\ncomponent.define('placeincenter', (m, c) => m.child = c, _,\r\n  m => h('div', {\r\n    style: `height:100%;display:flex;\r\n      justify-content: center;align-items: center;`\r\n  }, m.child))\r\n\r\ncomponent.define('top', _, df => {\r\n  \r\n}, m => { })\r\n\r\ncomponent.define('infinite-panel', m => {\r\n  m.camera = [0, 0, 1], m.realcamera = [...m.camera]\r\n  m.zoomfactor = 1.2\r\n}, df => {\r\n  df('setcamera', (c = m.camera) => (m.camera = c,\r\n    component.animation('move', () => (\r\n      m.camera.forEach((v, i) => m.realcamera[i]\r\n        = expdecay(m.realcamera[i], v, 16, dt)),\r\n      m.updbg(), deepequal(m.camera, m.realcamera)))))\r\n  df('updbg', m => {\r\n    m._background.getBoundingClientRect\r\n  })\r\n}, m => (setTimeout(() => m.setcamera()),\r\n  h('div', { style: `height:100%;` },\r\n    h('comp@placeincenter', _,\r\n      m._background = h('svg@svg', { style: `width:100%;height:100%;` })\r\n    ),\r\n  )), {\r\n  static: { zoomfactor: 1.2 }\r\n})\r\n\r\ncomponent.define('graph')\r\ncomponent.define('graph-node')\r\ncomponent.define('graph-edge')"}