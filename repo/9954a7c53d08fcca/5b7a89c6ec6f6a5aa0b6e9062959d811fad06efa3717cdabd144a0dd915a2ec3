{"id":"5b7a89c6ec6f6a5aa0b6e9062959d811fad06efa3717cdabd144a0dd915a2ec3","to":[],"value":"Object.assign($, await require('../lib/common.js'))\r\nObject.assign($, await require('../comp.js'))\r\n\r\ncomponent.define('placeincenter', { child: _ }, _,\r\n  m => h('div', {\r\n    style: `height:100%;display:flex;\r\n      justify-content: center;align-items: center;`\r\n  }, m.child))\r\n\r\ncomponent.define('button', _, _,\r\n  m => h('button', {\r\n    js: {\r\n      textContent: 'hello comp',\r\n      onclick: log,\r\n    }, style: `\r\n      border:1px solid black; padding:0.5em;\r\n      border-radius: 0.5em; background: none;`\r\n  }), {\r\n  mod: (m, text) => { m.text = text },\r\n})\r\n\r\ncomponent.define('infinite-canvas', {}, _, _)\r\n\r\ncomponent.define('component-editor', { path: '' }, df => {\r\n\r\n}, m => h('div', _,\r\n  component.create('file-system-tree', { path: m.path }),\r\n  component.create('text-editor'),\r\n  component.create('component-previewer'),\r\n))\r\n\r\ncomponent.define('text-editor', _, _, m => h('textarea', { style: 'display:block;' }))\r\ncomponent.define('component-previewer', _, _, m => h('div', _, 'preview'))\r\n\r\ncomponent.define('file-system-tree', { path: '' }, df => {\r\n\r\n}, m => h('div', _,\r\n  component.create('tree-item', {\r\n    data: component.create('file-system-item', { path: m.path, system: m }),\r\n  }),\r\n))\r\n\r\ncomponent.define('file-system-item', { path: '', system: _ }, df => {\r\n  df('name', (m, i = m.path.lastIndexOf('/')) => i < 0 ? m.path : m.path.slice(i))\r\n  df('children', async m => {\r\n    const d = await dir(m.path)\r\n    Promise.all(d.map(async n => {\r\n      const p = m.path + '/' + n\r\n      await read(p)\r\n      return component.create('tree-item', {\r\n        data: component.create('file-system-item', { path: p, system: m.system }),\r\n      })\r\n    }))\r\n    return d\r\n  })\r\n})\r\n\r\ncomponent.define('tree-item', { open: false, data: _ }, df => {\r\n  df('_open_transform', m => `rotate(${m.open ? 90 : 0}deg)`)\r\n  df('toggle', async (m, flag) => {\r\n    m.open = flag ??= !m.open\r\n    m._open.style.transform = m._open_transform()\r\n    const c = await m.data?.children?.() ?? []\r\n    if (m.open) { m._child.append(...c.map(v => component.render(v))) }\r\n    else { m._child.innerHTML = '' }\r\n  })\r\n}, m => h('div', {\r\n  js: { onclick: () => m.toggle(), onauxclick: e => e.preventDefault() },\r\n  style: `cursor: pointer;\r\n    user-select: none;`,\r\n},\r\n  m._open = h('span', {\r\n    style: `position: absolute;\r\n      transform: ${m._open_transform()};`,\r\n  }, '>'),\r\n  h('span', {\r\n    style: `margin-left: 15px`\r\n  }, m.data?.name?.() ?? '[ERROR]'),\r\n  m._child = h('div', {\r\n    style: `margin-left: 15px`,\r\n  })\r\n))\r\n\r\ncomponent.define('leaf-item', { data: _ }, _,\r\n  m => h('div',\r\n    { js: { onclick: () => data?.onclick?.() }, },\r\n    m.data?.name?.() ?? '[ERROR]'))\r\n\r\ncomponent.define('', {}, _, _)"}