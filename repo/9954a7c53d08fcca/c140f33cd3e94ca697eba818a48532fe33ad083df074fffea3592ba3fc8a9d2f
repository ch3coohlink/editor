{"id":"c140f33cd3e94ca697eba818a48532fe33ad083df074fffea3592ba3fc8a9d2f","to":[],"value":"let { imul, log, cos, sqrt, ceil, PI, floor, random } = Math, mb32 =\r\n  a => t => (a = a + 1831565813 | 0, t = imul(a ^ a >>> 15, 1 | a),\r\n    t = t + imul(t ^ t >>> 7, 61 | t) ^ t, (t ^ t >>> 14) >>> 0) / 4294967296\r\n$.gseed = $.startseed = floor(4294967296 * random())\r\n$.nextseed = (s = floor(4294967296 * mb32(gseed)()), o = genrd(gseed = s)) => (\r\n  $.rd = o.rd, $.gaussian = o.gaussian, $.rdi = o.rdi)\r\n$.genrd = (seed = floor(4294967296 * Math.random()), _rd = mb32(seed)) => {\r\n  const rd = (a = 1, b) => (b ? 0 : (b = a, a = 0), _rd() * (b - a) + a)\r\n  const rdi = (a, b) => floor(rd(a, b))\r\n  const gaussian = (mean = 0, stdev = 1) => {\r\n    let u = 1 - rd(), v = rd()\r\n    let z = sqrt(-2.0 * log(u)) * cos(2.0 * PI * v)\r\n    return z * stdev + mean\r\n  } // Standard Normal variate using Box-Muller transform\r\n  const next = (s = floor(4294967296 * _rd())) => _rd = mb32(seed = s)\r\n  const r = { rd, rdi, gaussian, next }\r\n  Object.defineProperty(r, 'seed', { get: () => seed })\r\n  return r\r\n}; nextseed(0, genrd(gseed))\r\n\r\n$.hexenc = b => [...b].map(v => v.toString(16).padStart(2, '0')).join(\"\")\r\n$.uuid_length = 16, $.uuid = (d = uuid_length) =>\r\n  hexenc(crypto.getRandomValues(new Uint8Array(d)))\r\n$.sha256async = async t => hexenc(new Uint8Array(\r\n  await crypto.subtle.digest('SHA-256', new TextEncoder().encode(t))))"}