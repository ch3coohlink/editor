{"id":"0dce225f6cdb8f3d0236510125cd6abb1b8c4e4b1b5839a0fdb72951a0a5785d","to":[],"value":"const { log, clear } = originconsole\r\nclear()\r\n\r\nconst canvas = await requestcanvas()\r\nconst adapter = await navigator.gpu.requestAdapter()\r\nconst device = await adapter.requestDevice()\r\nconst context = canvas.getContext('webgpu')\r\n\r\nconst format = navigator.gpu.getPreferredCanvasFormat()\r\ncontext.configure({ device, format, alphaMode: 'premultiplied' })\r\n\r\nconst now = () => performance.now() / 1000\r\non('canvasresize', ({ w, h }) => w !== 0 && h !== 0\r\n  ? (canvas.width = w, canvas.height = h) : 0)\r\n\r\nconst pipeline = device.createRenderPipeline({\r\n  layout: 'auto',\r\n  vertex: {\r\n    module: device.createShaderModule({\r\n      code: `@vertex\r\nfn main(@builtin(vertex_index) VertexIndex: u32) -> @builtin(position) vec4f {\r\n  var pos = array<vec2f, 3>(\r\n    vec2(0.0, 0.5), vec2(-0.5, -0.5), vec2(0.5, -0.5));\r\n  return vec4f(pos[VertexIndex], 0.0, 1.0);\r\n}`,\r\n    }),\r\n  },\r\n  fragment: {\r\n    module: device.createShaderModule({\r\n      code: `@fragment\r\nfn main() -> @location(0) vec4f {\r\n  return vec4(0.0, 1.0, 1.0, 1.0);\r\n}`,\r\n    }), targets: [{ format, }],\r\n  },\r\n  primitive: { topology: 'triangle-list' },\r\n});\r\n\r\nconst frame = () => {\r\n  const commandEncoder = device.createCommandEncoder()\r\n  const textureView = context.getCurrentTexture().createView()\r\n\r\n  const renderPassDescriptor = {\r\n    colorAttachments: [\r\n      {\r\n        view: textureView,\r\n        clearValue: [0, 0, 0, 1],\r\n        loadOp: 'clear',\r\n        storeOp: 'store',\r\n      },\r\n    ],\r\n  }\r\n\r\n  const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor)\r\n  passEncoder.setPipeline(pipeline)\r\n  passEncoder.draw(3)\r\n  passEncoder.end()\r\n\r\n  device.queue.submit([commandEncoder.finish()])\r\n}\r\n\r\n\r\nconst loop = () => {\r\n  const w = canvas.width, h = canvas.height, t = now()\r\n  frame()\r\n  requestAnimationFrame(loop)\r\n}; requestAnimationFrame(loop)"}