{"id":"279ef57210f91f2f606a178d244b19bd23e127ecc9ca8e6f721bfa7ab1d30eb0","to":[],"value":"const { log, clear } = console\r\nconst _ = undefined\r\nclear()\r\n\r\nconst local = n => globalThis.location.origin + '/' + n\r\nimportScripts(local('external/opentype.js'))\r\n\r\nconst fonts = {}\r\nconst loadfont = async (n, p) => {\r\n  log(`load ${n}`, performance.now())\r\n  let font = await fetch(local(p))\r\n  if (font.status !== 200) { throw Error(`Fail to load font file: ${n} at path: ${p}`) }\r\n  const b = await font.arrayBuffer()\r\n  log(`parse ${n}`, performance.now())\r\n  font = opentype.parse(b)\r\n  font.defaultglyph = font.glyphs.glyphs[0], fonts[n] = font\r\n  font.scalefactordiv1 = font.tables.os2.sTypoAscender / 1000\r\n  font.scalefactor = 1 / font.scalefactordiv1\r\n  log(`load ${n} fin.`, performance.now())\r\n}\r\n\r\nawait Promise.all([\r\n  loadfont('consolas', 'assets/font/consolas.ttf'),\r\n  // loadfont('思源黑体', 'assets/font/SourceHanSansHWSC-Regular.otf'),\r\n])\r\n\r\nlog(opentype)\r\n\r\nconst font = fonts.consolas\r\n// const font = new opentype.Font()\r\nfont.forEachGlyph('👸🕵️‍♀️', _, _, _, _, log)\r\n\r\nreturn\r\n\r\nfor (const k in fonts) {\r\n  const o = {}, font = fonts[k]\r\n  const ks = Object.keys(font.tables)\r\n  Object.values(font.tables).forEach((v, i) => o[ks[i]] = v)\r\n  log(JSON.stringify(o))\r\n  log(JSON.stringify(font.glyphs.glyphs))\r\n}\r\n\r\n// 时间记录：\r\n// load consolas 32.200000047683716\r\n// load 思源黑体 32.60000014305115\r\n// parse consolas 48.200000047683716\r\n// load consolas fin. 84.10000014305115\r\n// parse 思源黑体 231.70000004768372\r\n// load 思源黑体 fin. 384.5\r\n\r\n// 结论：加载字体文件和解析都消耗一定时间，尤其是中文字体\r\n// 建议将字体服务从沙盒中独立出来\r\n// 或者将应用设计为不等待字体加载就开始运行\r\n// 等字体文件加载完成之后更新渲染结果"}