{"id":"fd674e947e1a6f811abba094b04dcfb8478b8de7d26a1c9c052246ed04b30d62","to":[],"value":"const { log } = console\r\nconsole.clear()\r\nlog(new Date())\r\n\r\nconst data = [\r\n  { type: 'text', value: 'test text' },\r\n  {\r\n    type: 'ref', line: [25, 60],\r\n    value: 'de4483aeac31331dcb135fa9bffff5f3ffd1a38523497439c0d13c45b27c48ac',\r\n  },\r\n  {\r\n    type: 'code', value: `await require(\"0/test.js\")\r\nawait require(\"1/test.js\")`\r\n    , ref: [\r\n      'eb65e183d886a11d5b5ad6ac89c1708e4634013a0373ee57c25dece51d0d3197',\r\n      '245d8ccfa96033501ff6790a9b807afcc0c1e5683e288b44e6c258a51ccf1dd1'\r\n    ]\r\n  },\r\n  {\r\n    type: 'exec',\r\n    value: 'block above'\r\n  },\r\n  {\r\n    type: 'exec',\r\n    value: '9531d836c7feadd950bc91709e2843823eeaee951582ca03a272272cc0c75a32'\r\n  }\r\n]\r\n\r\nlog(...data)\r\n\r\nconst dom = (t = 'div', opt) => document.createElement(t, opt)\r\nconst textdiv = t => { let e = dom(); e.textContent = t; return e }\r\nconst block = d => {\r\n  const pe = dom(), e = dom(); pe.append(e)\r\n  pe.style.position = 'relative'\r\n  e.style.margin = '10px'\r\n  e.style.minHeight = '30px'\r\n  e.style.overflow = 'hidden'\r\n  e.style.borderRadius = '10px'\r\n  e.style.boxShadow = '#00000033 0 2px 4px 2px'\r\n  const titlebar = dom(), blockopdiv = dom(), ctn = dom()\r\n  titlebar.append(ctn, blockopdiv)\r\n  titlebar.style.height = '30px'\r\n  titlebar.style.display = 'flex'\r\n  titlebar.style.position = 'relative'\r\n  titlebar.style.zIndex = '100'\r\n  titlebar.style.background = 'white'\r\n  titlebar.style.boxShadow = '#00000033 0 0 4px'\r\n  titlebar.style.justifyContent = 'space-between'\r\n  titlebar.style.userSelect = 'none'\r\n  const type = dom('span'), title = dom('span')\r\n  type.style.margin = '0 5px'\r\n  title.style.marginRight = '5px'\r\n  ctn.append(type, title)\r\n  ctn.style.padding = '3px'\r\n  ctn.style.position = 'relative'\r\n  ctn.style.display = 'flex'\r\n  ctn.style.alignItems = 'baseline'\r\n  const userdiv = dom()\r\n  userdiv.style.position = 'relative'\r\n  userdiv.style.transition = 'height 0.2s'\r\n  e.append(titlebar, userdiv)\r\n  const a = '➕ ➖ 🟰 ✖️'.split(' ').map((t, i, a) => {\r\n    const e = dom('span'), last = i === a.length - 1\r\n    e.textContent = t\r\n    e.style.width = '32px'\r\n    e.style.display = 'flex'\r\n    e.style.background = 'white'\r\n    e.style.justifyContent = 'center'\r\n    e.style.alignItems = 'center'\r\n    e.style.boxShadow = '#00000033 0.5px 0 4px'\r\n    e.style.zIndex = 100 - i\r\n    e.addEventListener('pointerenter', () => (e.style.filter = 'brightness(0.9)',\r\n      last ? e.style.background = '#ff9999' : 0))\r\n    e.addEventListener('pointerleave', () => (e.style.filter = '',\r\n      last ? e.style.background = 'white' : 0))\r\n    e.addEventListener('pointerdown', () => e.style.filter = 'brightness(0.8)')\r\n    e.addEventListener('pointerup', () => e.style.filter = 'brightness(0.9)')\r\n    return e\r\n  }); blockopdiv.append(...a)\r\n  blockopdiv.style.display = 'flex'\r\n\r\n  let oriht = 0, toggleblock = () => {\r\n    oriht === 0 ? (oriht = userdiv.clientHeight, userdiv.style.height = 0)\r\n      : (userdiv.style.height = oriht + 'px', oriht = 0)\r\n  }; setTimeout(() => userdiv.style.height = userdiv.clientHeight + 'px')\r\n  pe.toggleblock = a[1].onclick = toggleblock\r\n  pe.data = data\r\n\r\n  const vcs = $$.vcs\r\n  switch (d.type) {\r\n    case 'text': {\r\n      type.textContent = '📜'\r\n      title.textContent = d.name ?? 'doc snippet'\r\n      title.contentEditable = true\r\n      const c = dom(); userdiv.append(c)\r\n      c.contentEditable = true\r\n      c.style.padding = '10px'\r\n      c.innerHTML = d.value\r\n    } break\r\n    case 'ref': {\r\n      type.textContent = '✂️'\r\n      const te = $$.texteditor()\r\n      te.style.height = 19 * (d.line[1] - d.line[0] + 1) + 'px'\r\n      const file = vcs.g[d.value]\r\n      const name = vcs.getfrom(file).to[file.id].name\r\n      const path = vcs.getpath(file)\r\n      title.textContent = 'ref: ' + path.version.id.slice(0, 8) + '/' + name\r\n      title.style.cursor = 'pointer'\r\n      title.onclick = log\r\n      te.value = vcs.g[file.value].value\r\n      te.change_language('javascript')\r\n      ctn.append(type, title)\r\n      const reset = () => {\r\n        te.editor.revealLinesNearTop(d.line[0] + 5, d.line[1])\r\n        te.editor.setPosition({ lineNumber: d.line[0], column: 1000 })\r\n      }; setTimeout(reset, 50); {\r\n        const preventscroll = dom()\r\n        preventscroll.style.position = 'absolute'\r\n        preventscroll.style.top = preventscroll.style.left = '0'\r\n        preventscroll.style.width = preventscroll.style.height = '100%'\r\n        userdiv.append(te, preventscroll)\r\n        preventscroll.addEventListener('pointerdown', e => (e.preventDefault(),\r\n          te.focus(), te.editor.focus(), preventscroll.style.pointerEvents = 'none'))\r\n        te.addEventListener('blur', () => preventscroll.style.pointerEvents = 'initial')\r\n        title.style.cursor = 'pointer'\r\n      }\r\n    } break\r\n    case 'code': {\r\n      type.textContent = '📝'\r\n      title.contentEditable = true\r\n      title.textContent = 'snippet'\r\n      const te = $$.texteditor()\r\n      te.change_language('javascript')\r\n      te.style.height = '200px'\r\n      te.value = d.value\r\n      ctn.append(...d.ref.map(t => {\r\n        const s = dom('span')\r\n        s.style.fontSize = '10px'\r\n        s.style.cursor = 'pointer'\r\n        s.textContent = '🟢' + t.slice(0, 8)\r\n        s.style.marginRight = '5px'\r\n        return s\r\n      })); {\r\n        const preventscroll = dom()\r\n        preventscroll.style.position = 'absolute'\r\n        preventscroll.style.top = preventscroll.style.left = '0'\r\n        preventscroll.style.width = preventscroll.style.height = '100%'\r\n        userdiv.append(te, preventscroll)\r\n        preventscroll.addEventListener('pointerdown', e => (e.preventDefault(),\r\n          te.focus(), te.editor.focus(), preventscroll.style.pointerEvents = 'none'))\r\n        te.addEventListener('blur', () => preventscroll.style.pointerEvents = 'initial')\r\n      }\r\n    } break\r\n    case 'exec': {\r\n      type.textContent = '💻'\r\n      userdiv.style.height = '300px'\r\n      if (d.value === 'block above') {\r\n        const getfile = () => {\r\n          log(blocks.indexOf(pe))\r\n        }\r\n        const sb = $$.sandboxtab(vcs, { type: 'virtual', getfile })\r\n        ctn.append(sb.configtab)\r\n        userdiv.append(sb)\r\n        title.textContent = 'exec: above block'\r\n      } else {\r\n        const file = vcs.g[d.value]\r\n        const sb = $$.sandboxtab(vcs, file)\r\n        ctn.append(sb.configtab)\r\n        userdiv.append(sb)\r\n        const name = vcs.getfrom(file).to[file.id].name\r\n        const path = vcs.getpath(file)\r\n        title.textContent = 'exec: ' + path.version.id.slice(0, 8) + '/' + name\r\n        title.style.cursor = 'pointer'\r\n      }\r\n    } break;\r\n  } return pe\r\n}\r\nconst blocks = data.map(block)\r\nroot.append(...blocks)"}