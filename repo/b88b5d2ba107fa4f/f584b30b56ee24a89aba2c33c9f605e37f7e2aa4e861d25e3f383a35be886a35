{"id":"f584b30b56ee24a89aba2c33c9f605e37f7e2aa4e861d25e3f383a35be886a35","to":[],"value":"$.jsmime = 'application/javascript'\r\n$.bootworker = (src, url) => {\r\n  url ??= URL.createObjectURL(new Blob([src], { type: jsmime }))\r\n  return new Worker(url)\r\n}\r\n$.loadsrc = async (p, type = jsmime) => {\r\n  let [ver, path, src] = await readfile(p, { raw: true, watch: true })\r\n  if (type === jsmime) {\r\n    src = `//# sourceURL=${ver.slice(0, 16) + '/' + path}\\n` + src\r\n  } return URL.createObjectURL(new Blob([src], { type }))\r\n}\r\n\r\nconst w = bootworker(undefined, await loadsrc('./worker.js'))\r\nconst send = (t, o, ...a) => {\r\n  if (Array.isArray(o)) { o = { a: o, isarr: true } }\r\n  w.postMessage((o.type = t, o), a)\r\n}\r\n\r\nlet alive = performance.now()\r\nconst light = document.createElement('div')\r\nconst resetlight = () => {\r\n  light.textContent = 'ðŸŸ¢'\r\n  light.style.position = 'absolute'\r\n  light.style.top = '-100px'\r\n  light.style.right = '-100px'\r\n  light.style.transition = 'all 0.2s'\r\n}; resetlight()\r\nsetInterval(() => {\r\n  if (alive + 1100 < performance.now()) {\r\n    light.textContent = 'ðŸ”´'\r\n    light.style.top = '0px'\r\n    light.style.right = '0px'\r\n  }\r\n}, 1000)\r\n\r\nroot.style.overflow = 'hidden'\r\nroot.style.position = 'relative'\r\nroot.append(light)\r\n\r\nw.addEventListener('message', async e => {\r\n  let o = e.data, fs = '$function$'\r\n  if (o.isarr) { o.a.type = o.type; o = o.a }\r\n  try {\r\n    if (o.type.startsWith(fs)) {\r\n      const r = await (eval(o.type.slice(fs.length))(...o))\r\n      send('callfin', { r })\r\n    } else if (o.type === 'heartbeat') {\r\n      alive = performance.now()\r\n      resetlight()\r\n    } else { throw Error(`unknown type: ${o.type}`) }\r\n  } catch (e) { send('error', { r }) }\r\n})\r\n\r\n$.loadworker = async p =>\r\n  send('init', await readfile(p, { raw: true, watch: true }))\r\n\r\nloadworker('test_heavy_workload.js')"}