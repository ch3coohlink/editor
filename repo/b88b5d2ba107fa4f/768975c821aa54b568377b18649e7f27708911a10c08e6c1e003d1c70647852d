{"id":"768975c821aa54b568377b18649e7f27708911a10c08e6c1e003d1c70647852d","to":[],"value":"const { rd, rdi, uuid } = await require('util/random.js')\r\nconst arrobj = (t, o = {}, ...a) => (a.type = t, Object.assign(a, o), a)\r\nconst rdir = () => rd() > 0.5 ? 'row' : 'column'\r\nconst ctn = () => arrobj('container', { direction: rdir() })\r\n$.layer = (d, data = ctn()) => {\r\n  if (!(d > 0)) { return data }\r\n  for (let i = 0, l = rdi(1, 5); i < l; i++) {\r\n    const r = rd();\r\n    if (data.type === 'docker') {\r\n      data.push({ type: 'tab', content: uuid() })\r\n    } else if (data.type === 'container') {\r\n      if (r < 0.5) {\r\n        data.push(layer(d - 1, ctn()))\r\n      } else {\r\n        const o = arrobj('docker', {})\r\n        if (d === 1) { o.push({ type: 'tab', content: uuid() }) }\r\n        else { layer(d - 1, o) } data.push(o)\r\n      }\r\n    }\r\n  } return data\r\n}\r\n$.tostring = (d, i = 0) => {\r\n  const t = '|-'.repeat(i)\r\n  if (!d) { return t + 'undefined' }\r\n  switch (d.type) {\r\n    case 'container': return t + 'ctn ' + d.direction + '\\n'\r\n      + d.map(v => tostring(v, i + 1)).join('')\r\n    case 'docker': return t + 'docker\\n' + d.map(v => tostring(v, i + 1)).join('')\r\n    case 'tab': return t + 'tab ' + d.content + '\\n'\r\n  }\r\n}"}