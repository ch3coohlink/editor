{"id":"8f73c0c214e85e1edf2591ee6d837ba07ab4534da58c9fde85224f61b651f024","to":[],"value":"let $ = {}; {\r\n  globalThis.log = console.log\r\n  globalThis.dlog = console.dir\r\n  globalThis.__require = base => async path => {\r\n    let b = base.split('/'); path = path.split('/'); for (const p of path) {\r\n      if (p === '..') { b.pop() } else if (p !== '.') { b.push(p) }\r\n    } path = b.filter(v => v).join('/'); if (loaded.has(path)) { return }\r\n    await exec(path, await load(path))\r\n  }\r\n\r\n  let loaded = new Set, AF = (async () => { }).constructor\r\n  const exec = async (path, src) => (loaded.add(path), await (\r\n    new AF('$', `//# sourceURL=${path}\\n` +\r\n      `const __dirname = '${path.split('/').slice(0, -1).join('/')}'\\n` +\r\n      `const require = __require(__dirname)\\n` + `with($) {\\n${src}\\n}`)($)))\r\n\r\n  let waitload = new Map\r\n  let load = async path => new Promise((res, rej) => {\r\n    send({ command: 'load', path })\r\n    waitload.set(path, { res, rej })\r\n  })\r\n\r\n  const send = postMessage\r\n  addEventListener('message', e => {\r\n    const o = e.data\r\n    if (o.command === 'init') { exec(o.path, o.content) }\r\n    else if (o.command === 'initfail') { console.error(o.error) }\r\n    else if (o.command === 'load') {\r\n      waitload.get(o.path).res(o.content)\r\n      waitload.delete(o.path)\r\n    } else if (o.command === 'loadfail') {\r\n      waitload.get(o.path).rej(o.error)\r\n      waitload.delete(o.path)\r\n    }\r\n  })\r\n  setInterval(() => send({ command: 'heartbeat' }), 500)\r\n}"}