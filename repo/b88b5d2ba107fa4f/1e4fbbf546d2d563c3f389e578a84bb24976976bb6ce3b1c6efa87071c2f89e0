{"id":"1e4fbbf546d2d563c3f389e578a84bb24976976bb6ce3b1c6efa87071c2f89e0","to":[],"value":"const { log } = console\r\nconsole.clear()\r\nlog(new Date())\r\n\r\nconst data = [\r\n  { type: 'text', value: 'test text' },\r\n  {\r\n    type: 'ref', line: [25, 60],\r\n    value: 'de4483aeac31331dcb135fa9bffff5f3ffd1a38523497439c0d13c45b27c48ac',\r\n  },\r\n  {\r\n    type: 'code', value: `await require(\"0/test.js\")\r\nawait require(\"1/doceditor.js\")`\r\n    , links: [\r\n      'eb65e183d886a11d5b5ad6ac89c1708e4634013a0373ee57c25dece51d0d3197',\r\n      '245d8ccfa96033501ff6790a9b807afcc0c1e5683e288b44e6c258a51ccf1dd1'\r\n    ]\r\n  },\r\n  {\r\n    type: 'exec',\r\n    value: 'block above'\r\n  },\r\n  {\r\n    type: 'exec',\r\n    value: '9531d836c7feadd950bc91709e2843823eeaee951582ca03a272272cc0c75a32'\r\n  }\r\n]\r\n\r\nlog(...data)\r\n\r\nconst dom = (t = 'div', opt) => document.createElement(t, opt)\r\nconst textdiv = t => { let e = dom(); e.textContent = t; return e }\r\nconst block = d => {\r\n  const pe = dom(), e = dom(); pe.append(e)\r\n  pe.style.position = 'relative'\r\n  pe.style.width = '100%'\r\n  e.style.margin = '10px'\r\n  e.style.minHeight = '30px'\r\n  e.style.overflow = 'hidden'\r\n  e.style.borderRadius = '10px'\r\n  e.style.boxShadow = '#00000033 0 2px 4px 2px'; {\r\n    const resizebar = dom(); pe.append(resizebar)\r\n    pe.resizebar = resizebar\r\n    const reset = () => {\r\n      resizebar.style.position = 'absolute'\r\n      resizebar.style.background = 'black'\r\n      resizebar.style.width = 'calc(100% - 40px)'\r\n      resizebar.style.transition = 'opacity 0.1s, height 0.1s, bottom 0.1s'\r\n      resizebar.style.height = '10px'\r\n      resizebar.style.bottom = '-10px'\r\n      resizebar.style.left = '20px'\r\n      resizebar.style.zIndex = '100'\r\n      resizebar.style.opacity = '0'\r\n      resizebar.style.userSelect = 'none'\r\n      resizebar.style.cursor = 'ns-resize'\r\n      resizebar.style.borderRadius = '10px'\r\n    }; reset()\r\n    resizebar.addEventListener('pointerenter', () => {\r\n      if (!pe.isopen) { return }\r\n      resizebar.style.opacity = '0.2'\r\n      resizebar.style.height = '20px'\r\n      resizebar.style.bottom = '-10px'\r\n    })\r\n    resizebar.addEventListener('pointerleave', reset)\r\n    $$.listenpointerdown(resizebar, e => {\r\n      const m = e => {\r\n        if (!pe.isopen) { return }\r\n        const r = div.getBoundingClientRect()\r\n        const br = b.getBoundingClientRect()\r\n        const p = $$.geteventlocation(e)\r\n        const y = p.y - br.height / 2\r\n        userdiv.style.height = y - r.top + 'px'\r\n      }; $$.listenpointermove(m); m(e)\r\n      $$.listenpointerup(() => {\r\n        $$.cancelpointermove(m)\r\n      })\r\n    })\r\n  } const titlebar = dom(), blockopdiv = dom(), ctn = dom()\r\n  titlebar.append(ctn, blockopdiv)\r\n  titlebar.style.height = '30px'\r\n  titlebar.style.display = 'flex'\r\n  titlebar.style.position = 'relative'\r\n  titlebar.style.zIndex = '100'\r\n  titlebar.style.background = 'white'\r\n  titlebar.style.boxShadow = '#00000033 0 0 4px'\r\n  titlebar.style.justifyContent = 'space-between'\r\n  titlebar.style.userSelect = 'none'\r\n  const type = dom('span'), title = dom('span')\r\n  type.style.margin = '0 5px'\r\n  title.style.marginRight = '5px'\r\n  ctn.append(type, title)\r\n  ctn.style.padding = '3px'\r\n  ctn.style.position = 'relative'\r\n  ctn.style.display = 'flex'\r\n  ctn.style.alignItems = 'baseline'\r\n  const userdiv = dom()\r\n  userdiv.style.position = 'relative'\r\n  userdiv.style.transition = 'height 0.2s'\r\n  e.append(titlebar, userdiv)\r\n  const a = '➕ ➖ 🟰 ✖️'.split(' ').map((t, i, a) => {\r\n    const e = dom('span'), last = i === a.length - 1\r\n    e.textContent = t\r\n    e.style.width = '32px'\r\n    e.style.display = 'flex'\r\n    e.style.background = 'white'\r\n    e.style.justifyContent = 'center'\r\n    e.style.alignItems = 'center'\r\n    e.style.boxShadow = '#00000033 0.5px 0 4px'\r\n    e.style.zIndex = 100 - i\r\n    e.addEventListener('pointerenter', () => (e.style.filter = 'brightness(0.9)',\r\n      last ? e.style.background = '#ff9999' : 0))\r\n    e.addEventListener('pointerleave', () => (e.style.filter = '',\r\n      last ? e.style.background = 'white' : 0))\r\n    e.addEventListener('pointerdown', () => e.style.filter = 'brightness(0.8)')\r\n    e.addEventListener('pointerup', () => e.style.filter = 'brightness(0.9)')\r\n    return e\r\n  }); blockopdiv.append(...a)\r\n  blockopdiv.style.display = 'flex'\r\n\r\n  let oriht = 0, getdata, toggleblock = () => {\r\n    oriht === 0 ? (oriht = userdiv.clientHeight, userdiv.style.height = 0)\r\n      : (userdiv.style.height = oriht + 'px', oriht = 0)\r\n  }; setTimeout(() => userdiv.style.height = userdiv.clientHeight + 'px')\r\n  a[0].onclick = () => { }\r\n  pe.toggleblock = a[1].onclick = toggleblock\r\n  $$.listenpointerdown(a[2], e => startdrag(pe, e))\r\n  a[3].onclick = () => { }\r\n  Object.defineProperty(pe, 'data', { get: () => getdata() })\r\n  Object.defineProperty(pe, 'isopen', { get: () => oriht === 0 })\r\n\r\n  const vcs = $$.vcs; switch (d.type) {\r\n    case 'text': {\r\n      type.textContent = '📜'\r\n      title.textContent = d.name ?? 'doc snippet'\r\n      title.contentEditable = true\r\n      const c = dom(); userdiv.append(c)\r\n      c.contentEditable = true\r\n      c.style.padding = '10px'\r\n      c.innerHTML = d.value\r\n      getdata = () => ({ type: 'text', value: c.innerText, name: title.innerText })\r\n    } break\r\n    case 'ref': {\r\n      type.textContent = '✂️'\r\n      const te = $$.texteditor()\r\n      te.style.height = 19 * (d.line[1] - d.line[0] + 1) + 'px'\r\n      const file = vcs.g[d.value], path = vcs.getpath(file)\r\n      const name = path.slice(-1)[0]\r\n      pe.file = { file, path, name, text: () => te.value }\r\n      title.textContent = 'ref: ' + path.version.id.slice(0, 8) + '/' + name\r\n      title.style.cursor = 'pointer'\r\n      title.onclick = log\r\n      te.value = vcs.g[file.value].value\r\n      te.change_language('javascript')\r\n      te.on('save', log)\r\n      ctn.append(type, title)\r\n      const reset = () => {\r\n        te.editor.revealLinesNearTop(d.line[0] + 5, d.line[1])\r\n        te.editor.setPosition({ lineNumber: d.line[0], column: 1000 })\r\n      }; setTimeout(reset, 50); {\r\n        const preventscroll = dom()\r\n        preventscroll.style.position = 'absolute'\r\n        preventscroll.style.top = preventscroll.style.left = '0'\r\n        preventscroll.style.width = preventscroll.style.height = '100%'\r\n        userdiv.append(te, preventscroll)\r\n        preventscroll.addEventListener('pointerdown', e => (e.preventDefault(),\r\n          te.focus(), te.editor.focus(), preventscroll.style.pointerEvents = 'none'))\r\n        te.addEventListener('blur', () => preventscroll.style.pointerEvents = 'initial')\r\n        title.style.cursor = 'pointer'\r\n      } getdata = () => ({ ...d })\r\n    } break\r\n    case 'code': {\r\n      type.textContent = '📝'\r\n      title.contentEditable = true\r\n      title.textContent = d.name ?? 'code snippet'\r\n      const te = $$.texteditor()\r\n      te.change_language('javascript')\r\n      te.style.height = '200px'\r\n      te.value = d.value\r\n      te.on('save', log)\r\n      ctn.append(...d.links.map(t => {\r\n        const s = dom('span')\r\n        s.style.fontSize = '10px'\r\n        s.style.cursor = 'pointer'\r\n        s.textContent = '🟢' + t.slice(0, 8)\r\n        s.style.marginRight = '5px'\r\n        return s\r\n      })); {\r\n        const preventscroll = dom()\r\n        preventscroll.style.position = 'absolute'\r\n        preventscroll.style.top = preventscroll.style.left = '0'\r\n        preventscroll.style.width = preventscroll.style.height = '100%'\r\n        userdiv.append(te, preventscroll)\r\n        preventscroll.addEventListener('pointerdown', e => (e.preventDefault(),\r\n          te.focus(), te.editor.focus(), preventscroll.style.pointerEvents = 'none'))\r\n        te.addEventListener('blur', () => preventscroll.style.pointerEvents = 'initial')\r\n      } getdata = () => ({ ...d, value: te.value, name: title.textContent })\r\n    } break\r\n    case 'exec': {\r\n      type.textContent = '💻'\r\n      userdiv.style.height = '300px'\r\n      if (d.value === 'block above') {\r\n        const getfile = () => {\r\n          const i = blocks.indexOf(pe), b = blocks[i - 1]\r\n          if (!b) { throw Error('No above block') }\r\n          const d = b.data; if (d.type === 'code') {\r\n            const i = '61788816003b7d997ec97e6c855e92dd405fd174d7e12171773473c90d7fd4e1'\r\n            return ['virtual.js', d.value, i, d.links]\r\n          } else if (d.type === 'ref') {\r\n            const f = b.file, p = f.path\r\n            return [p.join('/'), f.text(), p.version.id]\r\n          } else { throw Error('Can not exec above block') }\r\n        }, sb = $$.sandboxtab(vcs, { type: 'virtual', getfile })\r\n        ctn.append(sb.configtab)\r\n        userdiv.append(sb)\r\n        title.textContent = 'exec: above block'\r\n      } else {\r\n        const file = vcs.g[d.value]\r\n        const sb = $$.sandboxtab(vcs, file)\r\n        ctn.append(sb.configtab)\r\n        userdiv.append(sb)\r\n        const name = vcs.getfrom(file).to[file.id].name\r\n        const path = vcs.getpath(file)\r\n        title.textContent = 'exec: ' + path.version.id.slice(0, 8) + '/' + name\r\n        title.style.cursor = 'pointer'\r\n      } getdata = () => ({ ...d })\r\n    } break;\r\n  } return pe\r\n}\r\nconst blocks = data.map(block)\r\nconst startdrag = (b, e) => {\r\n  let i = blocks.indexOf(b)\r\n  const obs = []; for (const b of blocks) {\r\n    if (b.isopen) { obs.push(b); b.toggleblock() }\r\n  } blocks.splice(i, 1), b.remove(), elm.append(b)\r\n  b.style.position = 'absolute'\r\n  b.style.top = b.style.left = '0px'\r\n  b.style.zIndex = '100'\r\n  const m = e => {\r\n    const r = div.getBoundingClientRect()\r\n    const bsrs = [...div.children].map(e => e.getBoundingClientRect())\r\n    const br = b.getBoundingClientRect()\r\n    const p = $$.geteventlocation(e)\r\n    const y = p.y - br.height / 2\r\n    let j = 0; for (const r of bsrs) {\r\n      if (y < r.top) { break; } j++\r\n    } log(i = j); // TODO: preview drag position\r\n    b.style.top = y - r.top + 'px'\r\n  }; $$.listenpointermove(m); m(e)\r\n  $$.listenpointerup(() => {\r\n    $$.cancelpointermove(m)\r\n    b.style.position = 'relative'\r\n    b.style.top = b.style.left = ''\r\n    b.style.zIndex = ''\r\n    blocks.splice(i, 0, b)\r\n    $$.dsplice(div, i, 0, b)\r\n    obs.forEach(b => b.toggleblock())\r\n  })\r\n}\r\nconst elm = dom()\r\nelm.style.position = 'relative'\r\nconst div = dom()\r\ndiv.append(...blocks)\r\nelm.append(div)\r\nroot.append(elm)"}