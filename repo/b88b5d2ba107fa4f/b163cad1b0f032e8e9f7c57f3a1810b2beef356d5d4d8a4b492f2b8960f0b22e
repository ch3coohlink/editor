{"id":"b163cad1b0f032e8e9f7c57f3a1810b2beef356d5d4d8a4b492f2b8960f0b22e","to":[],"value":"$.jsmime = 'application/javascript'\r\n$.bootworker = (src, url) => {\r\n  url ??= URL.createObjectURL(new Blob([src], { type: jsmime }))\r\n  return new Worker(url)\r\n}\r\n$.loadsrc = async (p, type = jsmime) => {\r\n  let [ver, path, src] = await readfile(p, { raw: true, watch: true })\r\n  if (type === jsmime) {\r\n    src = `//# sourceURL=${ver.slice(0, 16) + '/' + path}\\n` + src\r\n  } return URL.createObjectURL(new Blob([src], { type }))\r\n}\r\n\r\nconst w = bootworker(undefined, await loadsrc('./worker.js'))\r\nconst send = (t, o, ...a) => {\r\n  if (Array.isArray(o)) { o = { a: o, isarr: true } }\r\n  w.postMessage((o.type = t, o), a)\r\n}\r\n\r\nw.addEventListener('message', async e => {\r\n  let o = e.data, fs = '$function$'\r\n  if (o.isarr) { o.a.type = o.type; o = o.a }\r\n  try {\r\n    if (o.type.startsWith(fs)) {\r\n      const r = await (eval(o.type.slice(fs.length))(...o))\r\n      send('callfin', { r })\r\n    } else if (o.type === 'heartbeat') {\r\n\r\n    } else { throw Error(`unknown type: ${o.type}`) }\r\n  } catch (e) { send('error', { r }) }\r\n})\r\n\r\nsend('init', await readfile('test_worker.js', { raw: true, watch: true }))"}